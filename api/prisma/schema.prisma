generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  email            String     @unique
  username         String     @unique
  signup_time      DateTime   @default(now())
  last_login_time  DateTime   @default(now())
  account_verified Boolean    @default(false)
  password         String
  role             UserRole   @default(NORMAL)
  Cart             UserCart[]

  PasswordReset PasswordReset[]

  EmailConfirmation EmailConfirmation?
}

model PasswordReset {
  id         Int       @id @default(autoincrement())
  user_id    Int
  user       User      @relation(fields: [user_id], references: [id])
  token      String    @unique
  created_at DateTime  @default(now())
  expires_at DateTime
  used_at    DateTime?
}

model EmailConfirmation {
  id           Int       @id @default(autoincrement())
  user_id      Int       @unique
  user         User      @relation(fields: [user_id], references: [id])
  token        String    @unique
  created_at   DateTime  @default(now())
  expires_at   DateTime
  confirmed_at DateTime?
}

model UserCart {
  id        Int    @id @default(autoincrement())
  user_id   Int
  user      User   @relation(fields: [user_id], references: [id])
  course_id Int
  course    Course @relation(fields: [course_id], references: [id])
}

enum UserRole {
  ADMIN
  NORMAL
}

model School {
  id         Int         @id @default(autoincrement())
  name       String
  courses    Course[]
  professors Professor[]
}

model Professor {
  id         Int               @id @default(autoincrement())
  first_name String
  last_name  String
  rmp_id     String?
  school_id  Int
  school     School            @relation(fields: [school_id], references: [id])
  courses    ProfessorCourse[]
  reviews    Review[]
}

enum ReviewTag {
  TOUGH_GRADER
  GET_READY_TO_READ
  PARTICIPATION_MATTERS
  EXTRA_CREDIT
  GROUP_PROJECTS
  AMAZING_LECTURES
  CLEAR_GRADING_CRITERIA
  GIVES_GOOD_FEEDBACK
  INSPIRATIONAL
  LOTS_OF_HOMEWORK
  HILARIOUS
  BEWARE_OF_POP_QUIZZES
  SO_MANY_PAPERS
  CARING
  RESPECTED
  LECTURE_HEAVY
  GRADED_BY_FEW_THINGS
  ACCESSIBLE_OUTSIDE_CLASS
  ONLINE_SAVVY
  TESTS_ARE_TOUGH
  TEST_HEAVY
  WOULD_TAKE_AGAIN
  TESTS_NOT_MANY
  SKIP_CLASS_YOU_WONT_PASS
  CARES_ABOUT_STUDENTS
  RESPECTED_BY_STUDENTS
  EXTRA_CREDIT_OFFERED
}

enum Grade {
  A_PLUS
  A
  A_MINUS

  B_PLUS
  B
  B_MINUS

  C_PLUS
  C
  C_MINUS

  D_PLUS
  D
  D_MINUS

  F_PLUS
  F
  F_MINUS

  INCOMPLETE
  WITHDRAWN
  NOT_SURE
  OTHER
}

model Review {
  id           Int         @id @default(autoincrement())
  quality      Float
  difficulty   Float?
  time         DateTime
  tags         ReviewTag[]
  grade        Grade?
  professor_id Int
  professor    Professor   @relation(fields: [professor_id], references: [id])
}

model Course {
  id         Int               @id @default(autoincrement())
  name       String
  code       String
  school_id  Int
  school     School            @relation(fields: [school_id], references: [id])
  professors ProfessorCourse[]
  UserCart   UserCart[]
}

model ProfessorCourse {
  id           Int       @id @default(autoincrement())
  professor_id Int
  course_id    Int
  year         Int
  semester     Semester
  course       Course    @relation(fields: [course_id], references: [id])
  professor    Professor @relation(fields: [professor_id], references: [id])

  @@unique([professor_id, course_id, year, semester])
}

enum Semester {
  SPRING
  SUMMER
  FALL
}
