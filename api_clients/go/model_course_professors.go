/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CourseProfessors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CourseProfessors{}

// CourseProfessors struct for CourseProfessors
type CourseProfessors struct {
	Total float64 `json:"total"`
	Professors []DefaultSelectionPrisma36ProfessorPayload `json:"professors"`
}

type _CourseProfessors CourseProfessors

// NewCourseProfessors instantiates a new CourseProfessors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCourseProfessors(total float64, professors []DefaultSelectionPrisma36ProfessorPayload) *CourseProfessors {
	this := CourseProfessors{}
	this.Total = total
	this.Professors = professors
	return &this
}

// NewCourseProfessorsWithDefaults instantiates a new CourseProfessors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCourseProfessorsWithDefaults() *CourseProfessors {
	this := CourseProfessors{}
	return &this
}

// GetTotal returns the Total field value
func (o *CourseProfessors) GetTotal() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *CourseProfessors) GetTotalOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *CourseProfessors) SetTotal(v float64) {
	o.Total = v
}

// GetProfessors returns the Professors field value
func (o *CourseProfessors) GetProfessors() []DefaultSelectionPrisma36ProfessorPayload {
	if o == nil {
		var ret []DefaultSelectionPrisma36ProfessorPayload
		return ret
	}

	return o.Professors
}

// GetProfessorsOk returns a tuple with the Professors field value
// and a boolean to check if the value has been set.
func (o *CourseProfessors) GetProfessorsOk() ([]DefaultSelectionPrisma36ProfessorPayload, bool) {
	if o == nil {
		return nil, false
	}
	return o.Professors, true
}

// SetProfessors sets field value
func (o *CourseProfessors) SetProfessors(v []DefaultSelectionPrisma36ProfessorPayload) {
	o.Professors = v
}

func (o CourseProfessors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CourseProfessors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["professors"] = o.Professors
	return toSerialize, nil
}

func (o *CourseProfessors) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"professors",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCourseProfessors := _CourseProfessors{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCourseProfessors)

	if err != nil {
		return err
	}

	*o = CourseProfessors(varCourseProfessors)

	return err
}

type NullableCourseProfessors struct {
	value *CourseProfessors
	isSet bool
}

func (v NullableCourseProfessors) Get() *CourseProfessors {
	return v.value
}

func (v *NullableCourseProfessors) Set(val *CourseProfessors) {
	v.value = val
	v.isSet = true
}

func (v NullableCourseProfessors) IsSet() bool {
	return v.isSet
}

func (v *NullableCourseProfessors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCourseProfessors(val *CourseProfessors) *NullableCourseProfessors {
	return &NullableCourseProfessors{value: val, isSet: true}
}

func (v NullableCourseProfessors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCourseProfessors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


