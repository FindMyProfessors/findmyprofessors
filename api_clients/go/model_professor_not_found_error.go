/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProfessorNotFoundError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfessorNotFoundError{}

// ProfessorNotFoundError struct for ProfessorNotFoundError
type ProfessorNotFoundError struct {
	Message PickSchoolErrorMessageOrTypeMessage `json:"message"`
	Type    ProfessorErrorTypePROFESSORNOTFOUND `json:"type"`
}

type _ProfessorNotFoundError ProfessorNotFoundError

// NewProfessorNotFoundError instantiates a new ProfessorNotFoundError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfessorNotFoundError(message PickSchoolErrorMessageOrTypeMessage, type_ ProfessorErrorTypePROFESSORNOTFOUND) *ProfessorNotFoundError {
	this := ProfessorNotFoundError{}
	this.Message = message
	this.Type = type_
	return &this
}

// NewProfessorNotFoundErrorWithDefaults instantiates a new ProfessorNotFoundError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfessorNotFoundErrorWithDefaults() *ProfessorNotFoundError {
	this := ProfessorNotFoundError{}
	return &this
}

// GetMessage returns the Message field value
func (o *ProfessorNotFoundError) GetMessage() PickSchoolErrorMessageOrTypeMessage {
	if o == nil {
		var ret PickSchoolErrorMessageOrTypeMessage
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ProfessorNotFoundError) GetMessageOk() (*PickSchoolErrorMessageOrTypeMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ProfessorNotFoundError) SetMessage(v PickSchoolErrorMessageOrTypeMessage) {
	o.Message = v
}

// GetType returns the Type field value
func (o *ProfessorNotFoundError) GetType() ProfessorErrorTypePROFESSORNOTFOUND {
	if o == nil {
		var ret ProfessorErrorTypePROFESSORNOTFOUND
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProfessorNotFoundError) GetTypeOk() (*ProfessorErrorTypePROFESSORNOTFOUND, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProfessorNotFoundError) SetType(v ProfessorErrorTypePROFESSORNOTFOUND) {
	o.Type = v
}

func (o ProfessorNotFoundError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfessorNotFoundError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ProfessorNotFoundError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProfessorNotFoundError := _ProfessorNotFoundError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProfessorNotFoundError)

	if err != nil {
		return err
	}

	*o = ProfessorNotFoundError(varProfessorNotFoundError)

	return err
}

type NullableProfessorNotFoundError struct {
	value *ProfessorNotFoundError
	isSet bool
}

func (v NullableProfessorNotFoundError) Get() *ProfessorNotFoundError {
	return v.value
}

func (v *NullableProfessorNotFoundError) Set(val *ProfessorNotFoundError) {
	v.value = val
	v.isSet = true
}

func (v NullableProfessorNotFoundError) IsSet() bool {
	return v.isSet
}

func (v *NullableProfessorNotFoundError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfessorNotFoundError(val *ProfessorNotFoundError) *NullableProfessorNotFoundError {
	return &NullableProfessorNotFoundError{value: val, isSet: true}
}

func (v NullableProfessorNotFoundError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfessorNotFoundError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
