/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CourseErrorTypeCOURSEALREADYEXISTS the model 'CourseErrorTypeCOURSEALREADYEXISTS'
type CourseErrorTypeCOURSEALREADYEXISTS string

// List of CourseErrorType.COURSE_ALREADY_EXISTS
const (
	COURSE_ALREADY_EXISTS CourseErrorTypeCOURSEALREADYEXISTS = "COURSE_ALREADY_EXISTS"
)

// All allowed values of CourseErrorTypeCOURSEALREADYEXISTS enum
var AllowedCourseErrorTypeCOURSEALREADYEXISTSEnumValues = []CourseErrorTypeCOURSEALREADYEXISTS{
	"COURSE_ALREADY_EXISTS",
}

func (v *CourseErrorTypeCOURSEALREADYEXISTS) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CourseErrorTypeCOURSEALREADYEXISTS(value)
	for _, existing := range AllowedCourseErrorTypeCOURSEALREADYEXISTSEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CourseErrorTypeCOURSEALREADYEXISTS", value)
}

// NewCourseErrorTypeCOURSEALREADYEXISTSFromValue returns a pointer to a valid CourseErrorTypeCOURSEALREADYEXISTS
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCourseErrorTypeCOURSEALREADYEXISTSFromValue(v string) (*CourseErrorTypeCOURSEALREADYEXISTS, error) {
	ev := CourseErrorTypeCOURSEALREADYEXISTS(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CourseErrorTypeCOURSEALREADYEXISTS: valid values are %v", v, AllowedCourseErrorTypeCOURSEALREADYEXISTSEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CourseErrorTypeCOURSEALREADYEXISTS) IsValid() bool {
	for _, existing := range AllowedCourseErrorTypeCOURSEALREADYEXISTSEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CourseErrorType.COURSE_ALREADY_EXISTS value
func (v CourseErrorTypeCOURSEALREADYEXISTS) Ptr() *CourseErrorTypeCOURSEALREADYEXISTS {
	return &v
}

type NullableCourseErrorTypeCOURSEALREADYEXISTS struct {
	value *CourseErrorTypeCOURSEALREADYEXISTS
	isSet bool
}

func (v NullableCourseErrorTypeCOURSEALREADYEXISTS) Get() *CourseErrorTypeCOURSEALREADYEXISTS {
	return v.value
}

func (v *NullableCourseErrorTypeCOURSEALREADYEXISTS) Set(val *CourseErrorTypeCOURSEALREADYEXISTS) {
	v.value = val
	v.isSet = true
}

func (v NullableCourseErrorTypeCOURSEALREADYEXISTS) IsSet() bool {
	return v.isSet
}

func (v *NullableCourseErrorTypeCOURSEALREADYEXISTS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCourseErrorTypeCOURSEALREADYEXISTS(val *CourseErrorTypeCOURSEALREADYEXISTS) *NullableCourseErrorTypeCOURSEALREADYEXISTS {
	return &NullableCourseErrorTypeCOURSEALREADYEXISTS{value: val, isSet: true}
}

func (v NullableCourseErrorTypeCOURSEALREADYEXISTS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCourseErrorTypeCOURSEALREADYEXISTS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
