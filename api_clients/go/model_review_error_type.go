/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReviewErrorType the model 'ReviewErrorType'
type ReviewErrorType string

// List of ReviewErrorType
const (
	REVIEW_NOT_FOUND ReviewErrorType = "REVIEW_NOT_FOUND"
)

// All allowed values of ReviewErrorType enum
var AllowedReviewErrorTypeEnumValues = []ReviewErrorType{
	"REVIEW_NOT_FOUND",
}

func (v *ReviewErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReviewErrorType(value)
	for _, existing := range AllowedReviewErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReviewErrorType", value)
}

// NewReviewErrorTypeFromValue returns a pointer to a valid ReviewErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReviewErrorTypeFromValue(v string) (*ReviewErrorType, error) {
	ev := ReviewErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReviewErrorType: valid values are %v", v, AllowedReviewErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReviewErrorType) IsValid() bool {
	for _, existing := range AllowedReviewErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReviewErrorType value
func (v ReviewErrorType) Ptr() *ReviewErrorType {
	return &v
}

type NullableReviewErrorType struct {
	value *ReviewErrorType
	isSet bool
}

func (v NullableReviewErrorType) Get() *ReviewErrorType {
	return v.value
}

func (v *NullableReviewErrorType) Set(val *ReviewErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewErrorType(val *ReviewErrorType) *NullableReviewErrorType {
	return &NullableReviewErrorType{value: val, isSet: true}
}

func (v NullableReviewErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
