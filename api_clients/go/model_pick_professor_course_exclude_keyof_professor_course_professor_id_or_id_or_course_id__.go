/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId{}

// PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId From T, pick a set of properties whose keys are in the union K
type PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId struct {
	Year float64 `json:"year"`
	Semester Model36EnumsSemester `json:"semester"`
}

type _PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId

// NewPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId instantiates a new PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId(year float64, semester Model36EnumsSemester) *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId {
	this := PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId{}
	this.Year = year
	this.Semester = semester
	return &this
}

// NewPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseIdWithDefaults instantiates a new PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseIdWithDefaults() *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId {
	this := PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId{}
	return &this
}

// GetYear returns the Year field value
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) GetYear() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) GetYearOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) SetYear(v float64) {
	o.Year = v
}

// GetSemester returns the Semester field value
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) GetSemester() Model36EnumsSemester {
	if o == nil {
		var ret Model36EnumsSemester
		return ret
	}

	return o.Semester
}

// GetSemesterOk returns a tuple with the Semester field value
// and a boolean to check if the value has been set.
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) GetSemesterOk() (*Model36EnumsSemester, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Semester, true
}

// SetSemester sets field value
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) SetSemester(v Model36EnumsSemester) {
	o.Semester = v
}

func (o PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["year"] = o.Year
	toSerialize["semester"] = o.Semester
	return toSerialize, nil
}

func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"year",
		"semester",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId := _PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId)

	if err != nil {
		return err
	}

	*o = PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId(varPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId)

	return err
}

type NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId struct {
	value *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId
	isSet bool
}

func (v NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) Get() *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId {
	return v.value
}

func (v *NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) Set(val *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) {
	v.value = val
	v.isSet = true
}

func (v NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) IsSet() bool {
	return v.isSet
}

func (v *NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId(val *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) *NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId {
	return &NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId{value: val, isSet: true}
}

func (v NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdOrCourseId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


