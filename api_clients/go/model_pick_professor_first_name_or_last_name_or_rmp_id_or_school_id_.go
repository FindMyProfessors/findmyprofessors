/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId{}

// PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId From T, pick a set of properties whose keys are in the union K
type PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	RmpId     string `json:"rmp_id"`
	SchoolId  int32  `json:"school_id"`
}

type _PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId

// NewPickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId instantiates a new PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId(firstName string, lastName string, rmpId string, schoolId int32) *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId {
	this := PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId{}
	this.FirstName = firstName
	this.LastName = lastName
	this.RmpId = rmpId
	this.SchoolId = schoolId
	return &this
}

// NewPickProfessorFirstNameOrLastNameOrRmpIdOrSchoolIdWithDefaults instantiates a new PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPickProfessorFirstNameOrLastNameOrRmpIdOrSchoolIdWithDefaults() *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId {
	this := PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId{}
	return &this
}

// GetFirstName returns the FirstName field value
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) GetFirstName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value
// and a boolean to check if the value has been set.
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FirstName, true
}

// SetFirstName sets field value
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) SetFirstName(v string) {
	o.FirstName = v
}

// GetLastName returns the LastName field value
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) GetLastName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value
// and a boolean to check if the value has been set.
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastName, true
}

// SetLastName sets field value
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) SetLastName(v string) {
	o.LastName = v
}

// GetRmpId returns the RmpId field value
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) GetRmpId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RmpId
}

// GetRmpIdOk returns a tuple with the RmpId field value
// and a boolean to check if the value has been set.
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) GetRmpIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RmpId, true
}

// SetRmpId sets field value
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) SetRmpId(v string) {
	o.RmpId = v
}

// GetSchoolId returns the SchoolId field value
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) GetSchoolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SchoolId
}

// GetSchoolIdOk returns a tuple with the SchoolId field value
// and a boolean to check if the value has been set.
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) GetSchoolIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchoolId, true
}

// SetSchoolId sets field value
func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) SetSchoolId(v int32) {
	o.SchoolId = v
}

func (o PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["first_name"] = o.FirstName
	toSerialize["last_name"] = o.LastName
	toSerialize["rmp_id"] = o.RmpId
	toSerialize["school_id"] = o.SchoolId
	return toSerialize, nil
}

func (o *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"first_name",
		"last_name",
		"rmp_id",
		"school_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId := _PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId)

	if err != nil {
		return err
	}

	*o = PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId(varPickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId)

	return err
}

type NullablePickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId struct {
	value *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId
	isSet bool
}

func (v NullablePickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) Get() *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId {
	return v.value
}

func (v *NullablePickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) Set(val *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) {
	v.value = val
	v.isSet = true
}

func (v NullablePickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) IsSet() bool {
	return v.isSet
}

func (v *NullablePickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId(val *PickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) *NullablePickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId {
	return &NullablePickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId{value: val, isSet: true}
}

func (v NullablePickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePickProfessorFirstNameOrLastNameOrRmpIdOrSchoolId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
