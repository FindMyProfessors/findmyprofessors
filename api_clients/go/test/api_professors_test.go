/*
api

Testing ProfessorsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_openapi_ProfessorsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProfessorsAPIService CreateProfessor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfessorsAPI.CreateProfessor(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfessorsAPIService DeleteProfessor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float64

		httpRes, err := apiClient.ProfessorsAPI.DeleteProfessor(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfessorsAPIService Enroll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float64

		resp, httpRes, err := apiClient.ProfessorsAPI.Enroll(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfessorsAPIService GetProfessor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float64

		resp, httpRes, err := apiClient.ProfessorsAPI.GetProfessor(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfessorsAPIService GetProfessorAnalysis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float64

		resp, httpRes, err := apiClient.ProfessorsAPI.GetProfessorAnalysis(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfessorsAPIService GetProfessorCourses", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float64

		resp, httpRes, err := apiClient.ProfessorsAPI.GetProfessorCourses(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfessorsAPIService GetProfessorRating", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float64

		resp, httpRes, err := apiClient.ProfessorsAPI.GetProfessorRating(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfessorsAPIService GetReviews", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float64

		resp, httpRes, err := apiClient.ProfessorsAPI.GetReviews(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfessorsAPIService SearchProfessors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProfessorsAPI.SearchProfessors(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProfessorsAPIService UpdateProfessor", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id float64

		resp, httpRes, err := apiClient.ProfessorsAPI.UpdateProfessor(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
