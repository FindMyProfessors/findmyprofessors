/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the ProfessorAlreadyExistsError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfessorAlreadyExistsError{}

// ProfessorAlreadyExistsError struct for ProfessorAlreadyExistsError
type ProfessorAlreadyExistsError struct {
	Message PickSchoolErrorMessageOrTypeMessage      `json:"message"`
	Type    ProfessorErrorTypePROFESSORALREADYEXISTS `json:"type"`
}

type _ProfessorAlreadyExistsError ProfessorAlreadyExistsError

// NewProfessorAlreadyExistsError instantiates a new ProfessorAlreadyExistsError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfessorAlreadyExistsError(message PickSchoolErrorMessageOrTypeMessage, type_ ProfessorErrorTypePROFESSORALREADYEXISTS) *ProfessorAlreadyExistsError {
	this := ProfessorAlreadyExistsError{}
	this.Message = message
	this.Type = type_
	return &this
}

// NewProfessorAlreadyExistsErrorWithDefaults instantiates a new ProfessorAlreadyExistsError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfessorAlreadyExistsErrorWithDefaults() *ProfessorAlreadyExistsError {
	this := ProfessorAlreadyExistsError{}
	return &this
}

// GetMessage returns the Message field value
func (o *ProfessorAlreadyExistsError) GetMessage() PickSchoolErrorMessageOrTypeMessage {
	if o == nil {
		var ret PickSchoolErrorMessageOrTypeMessage
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ProfessorAlreadyExistsError) GetMessageOk() (*PickSchoolErrorMessageOrTypeMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ProfessorAlreadyExistsError) SetMessage(v PickSchoolErrorMessageOrTypeMessage) {
	o.Message = v
}

// GetType returns the Type field value
func (o *ProfessorAlreadyExistsError) GetType() ProfessorErrorTypePROFESSORALREADYEXISTS {
	if o == nil {
		var ret ProfessorErrorTypePROFESSORALREADYEXISTS
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProfessorAlreadyExistsError) GetTypeOk() (*ProfessorErrorTypePROFESSORALREADYEXISTS, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProfessorAlreadyExistsError) SetType(v ProfessorErrorTypePROFESSORALREADYEXISTS) {
	o.Type = v
}

func (o ProfessorAlreadyExistsError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfessorAlreadyExistsError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ProfessorAlreadyExistsError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProfessorAlreadyExistsError := _ProfessorAlreadyExistsError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProfessorAlreadyExistsError)

	if err != nil {
		return err
	}

	*o = ProfessorAlreadyExistsError(varProfessorAlreadyExistsError)

	return err
}

type NullableProfessorAlreadyExistsError struct {
	value *ProfessorAlreadyExistsError
	isSet bool
}

func (v NullableProfessorAlreadyExistsError) Get() *ProfessorAlreadyExistsError {
	return v.value
}

func (v *NullableProfessorAlreadyExistsError) Set(val *ProfessorAlreadyExistsError) {
	v.value = val
	v.isSet = true
}

func (v NullableProfessorAlreadyExistsError) IsSet() bool {
	return v.isSet
}

func (v *NullableProfessorAlreadyExistsError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfessorAlreadyExistsError(val *ProfessorAlreadyExistsError) *NullableProfessorAlreadyExistsError {
	return &NullableProfessorAlreadyExistsError{value: val, isSet: true}
}

func (v NullableProfessorAlreadyExistsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfessorAlreadyExistsError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
