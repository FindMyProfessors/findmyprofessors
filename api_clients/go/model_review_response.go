/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ReviewResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewResponse{}

// ReviewResponse struct for ReviewResponse
type ReviewResponse struct {
	Id          int32                 `json:"id"`
	Quality     float32               `json:"quality"`
	Difficulty  float32               `json:"difficulty"`
	Time        time.Time             `json:"time"`
	Tags        Model36EnumsReviewTag `json:"tags"`
	Grade       odel36EnumsGrade      `json:"grade"`
	ProfessorId int32                 `json:"professor_id"`
}

type _ReviewResponse ReviewResponse

// NewReviewResponse instantiates a new ReviewResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewResponse(id int32, quality float32, difficulty float32, time time.Time, tags []ModelEnumsReviewTag, grade ModelEnumsGrade, professorId int32) *ReviewResponse {
	this := ReviewResponse{}
	this.Id = id
	this.Quality = quality
	this.Difficulty = difficulty
	this.Time = time
	this.Tags = tags
	this.Grade = grade
	this.ProfessorId = professorId
	return &this
}

// NewReviewResponseWithDefaults instantiates a new ReviewResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewResponseWithDefaults() *ReviewResponse {
	this := ReviewResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ReviewResponse) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ReviewResponse) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ReviewResponse) SetId(v int32) {
	o.Id = v
}

// GetQuality returns the Quality field value
func (o *ReviewResponse) GetQuality() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Quality
}

// GetQualityOk returns a tuple with the Quality field value
// and a boolean to check if the value has been set.
func (o *ReviewResponse) GetQualityOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quality, true
}

// SetQuality sets field value
func (o *ReviewResponse) SetQuality(v float32) {
	o.Quality = v
}

// GetDifficulty returns the Difficulty field value
func (o *ReviewResponse) GetDifficulty() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Difficulty
}

// GetDifficultyOk returns a tuple with the Difficulty field value
// and a boolean to check if the value has been set.
func (o *ReviewResponse) GetDifficultyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Difficulty, true
}

// SetDifficulty sets field value
func (o *ReviewResponse) SetDifficulty(v float32) {
	o.Difficulty = v
}

// GetTime returns the Time field value
func (o *ReviewResponse) GetTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *ReviewResponse) GetTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *ReviewResponse) SetTime(v time.Time) {
	o.Time = v
}

// GetTags returns the Tags field value
func (o *ReviewResponse) GetTags() []ModelEnumsReviewTag {
	if o == nil {
		var ret []ModelEnumsReviewTag
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *ReviewResponse) GetTagsOk() ([]ModelEnumsReviewTag, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *ReviewResponse) SetTags(v []ModelEnumsReviewTag) {
	o.Tags = v
}

// GetGrade returns the Grade field value
func (o *ReviewResponse) GetGrade() ModelEnumsGrade {
	if o == nil {
		var ret ModelEnumsGrade
		return ret
	}

	return o.Grade
}

// GetGradeOk returns a tuple with the Grade field value
// and a boolean to check if the value has been set.
func (o *ReviewResponse) GetGradeOk() (*ModelEnumsGrade, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Grade, true
}

// SetGrade sets field value
func (o *ReviewResponse) SetGrade(v ModelEnumsGrade) {
	o.Grade = v
}

// GetProfessorId returns the ProfessorId field value
func (o *ReviewResponse) GetProfessorId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProfessorId
}

// GetProfessorIdOk returns a tuple with the ProfessorId field value
// and a boolean to check if the value has been set.
func (o *ReviewResponse) GetProfessorIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProfessorId, true
}

// SetProfessorId sets field value
func (o *ReviewResponse) SetProfessorId(v int32) {
	o.ProfessorId = v
}

func (o ReviewResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["quality"] = o.Quality
	toSerialize["difficulty"] = o.Difficulty
	toSerialize["time"] = o.Time
	toSerialize["tags"] = o.Tags
	toSerialize["grade"] = o.Grade
	toSerialize["professor_id"] = o.ProfessorId
	return toSerialize, nil
}

func (o *ReviewResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"quality",
		"difficulty",
		"time",
		"tags",
		"grade",
		"professor_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReviewResponse := _ReviewResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReviewResponse)

	if err != nil {
		return err
	}

	*o = ReviewResponse(varReviewResponse)

	return err
}

type NullableReviewResponse struct {
	value *ReviewResponse
	isSet bool
}

func (v NullableReviewResponse) Get() *ReviewResponse {
	return v.value
}

func (v *NullableReviewResponse) Set(val *ReviewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewResponse(val *ReviewResponse) *NullableReviewResponse {
	return &NullableReviewResponse{value: val, isSet: true}
}

func (v NullableReviewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
