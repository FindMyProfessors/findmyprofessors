/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdatedProfessor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatedProfessor{}

// UpdatedProfessor struct for UpdatedProfessor
type UpdatedProfessor struct {
	LastName NullableString `json:"last_name,omitempty"`
	FirstName NullableString `json:"first_name,omitempty"`
}

// NewUpdatedProfessor instantiates a new UpdatedProfessor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatedProfessor() *UpdatedProfessor {
	this := UpdatedProfessor{}
	return &this
}

// NewUpdatedProfessorWithDefaults instantiates a new UpdatedProfessor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatedProfessorWithDefaults() *UpdatedProfessor {
	this := UpdatedProfessor{}
	return &this
}

// GetLastName returns the LastName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatedProfessor) GetLastName() string {
	if o == nil || IsNil(o.LastName.Get()) {
		var ret string
		return ret
	}
	return *o.LastName.Get()
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatedProfessor) GetLastNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastName.Get(), o.LastName.IsSet()
}

// HasLastName returns a boolean if a field has been set.
func (o *UpdatedProfessor) HasLastName() bool {
	if o != nil && o.LastName.IsSet() {
		return true
	}

	return false
}

// SetLastName gets a reference to the given NullableString and assigns it to the LastName field.
func (o *UpdatedProfessor) SetLastName(v string) {
	o.LastName.Set(&v)
}
// SetLastNameNil sets the value for LastName to be an explicit nil
func (o *UpdatedProfessor) SetLastNameNil() {
	o.LastName.Set(nil)
}

// UnsetLastName ensures that no value is present for LastName, not even an explicit nil
func (o *UpdatedProfessor) UnsetLastName() {
	o.LastName.Unset()
}

// GetFirstName returns the FirstName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdatedProfessor) GetFirstName() string {
	if o == nil || IsNil(o.FirstName.Get()) {
		var ret string
		return ret
	}
	return *o.FirstName.Get()
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdatedProfessor) GetFirstNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstName.Get(), o.FirstName.IsSet()
}

// HasFirstName returns a boolean if a field has been set.
func (o *UpdatedProfessor) HasFirstName() bool {
	if o != nil && o.FirstName.IsSet() {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given NullableString and assigns it to the FirstName field.
func (o *UpdatedProfessor) SetFirstName(v string) {
	o.FirstName.Set(&v)
}
// SetFirstNameNil sets the value for FirstName to be an explicit nil
func (o *UpdatedProfessor) SetFirstNameNil() {
	o.FirstName.Set(nil)
}

// UnsetFirstName ensures that no value is present for FirstName, not even an explicit nil
func (o *UpdatedProfessor) UnsetFirstName() {
	o.FirstName.Unset()
}

func (o UpdatedProfessor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatedProfessor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.LastName.IsSet() {
		toSerialize["last_name"] = o.LastName.Get()
	}
	if o.FirstName.IsSet() {
		toSerialize["first_name"] = o.FirstName.Get()
	}
	return toSerialize, nil
}

type NullableUpdatedProfessor struct {
	value *UpdatedProfessor
	isSet bool
}

func (v NullableUpdatedProfessor) Get() *UpdatedProfessor {
	return v.value
}

func (v *NullableUpdatedProfessor) Set(val *UpdatedProfessor) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatedProfessor) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatedProfessor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatedProfessor(val *UpdatedProfessor) *NullableUpdatedProfessor {
	return &NullableUpdatedProfessor{value: val, isSet: true}
}

func (v NullableUpdatedProfessor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatedProfessor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


