/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsReviewTag the model 'EnumsReviewTag'
type EnumsReviewTag string

// List of _36_Enums.ReviewTag
const (
	TOUGH_GRADER             EnumsReviewTag = "TOUGH_GRADER"
	GET_READY_TO_READ        EnumsReviewTag = "GET_READY_TO_READ"
	PARTICIPATION_MATTERS    EnumsReviewTag = "PARTICIPATION_MATTERS"
	EXTRA_CREDIT             EnumsReviewTag = "EXTRA_CREDIT"
	GROUP_PROJECTS           EnumsReviewTag = "GROUP_PROJECTS"
	AMAZING_LECTURES         EnumsReviewTag = "AMAZING_LECTURES"
	CLEAR_GRADING_CRITERIA   EnumsReviewTag = "CLEAR_GRADING_CRITERIA"
	GIVES_GOOD_FEEDBACK      EnumsReviewTag = "GIVES_GOOD_FEEDBACK"
	INSPIRATIONAL            EnumsReviewTag = "INSPIRATIONAL"
	LOTS_OF_HOMEWORK         EnumsReviewTag = "LOTS_OF_HOMEWORK"
	HILARIOUS                EnumsReviewTag = "HILARIOUS"
	BEWARE_OF_POP_QUIZZES    EnumsReviewTag = "BEWARE_OF_POP_QUIZZES"
	SO_MANY_PAPERS           EnumsReviewTag = "SO_MANY_PAPERS"
	CARING                   EnumsReviewTag = "CARING"
	RESPECTED                EnumsReviewTag = "RESPECTED"
	LECTURE_HEAVY            EnumsReviewTag = "LECTURE_HEAVY"
	GRADED_BY_FEW_THINGS     EnumsReviewTag = "GRADED_BY_FEW_THINGS"
	ACCESSIBLE_OUTSIDE_CLASS EnumsReviewTag = "ACCESSIBLE_OUTSIDE_CLASS"
	ONLINE_SAVVY             EnumsReviewTag = "ONLINE_SAVVY"
	TESTS_ARE_TOUGH          EnumsReviewTag = "TESTS_ARE_TOUGH"
	TEST_HEAVY               EnumsReviewTag = "TEST_HEAVY"
	WOULD_TAKE_AGAIN         EnumsReviewTag = "WOULD_TAKE_AGAIN"
	TESTS_NOT_MANY           EnumsReviewTag = "TESTS_NOT_MANY"
	SKIP_CLASS_YOU_WONT_PASS EnumsReviewTag = "SKIP_CLASS_YOU_WONT_PASS"
	CARES_ABOUT_STUDENTS     EnumsReviewTag = "CARES_ABOUT_STUDENTS"
	RESPECTED_BY_STUDENTS    EnumsReviewTag = "RESPECTED_BY_STUDENTS"
	EXTRA_CREDIT_OFFERED     EnumsReviewTag = "EXTRA_CREDIT_OFFERED"
)

// All allowed values of EnumsReviewTag enum
var AllowedEnumsReviewTagEnumValues = []EnumsReviewTag{
	"TOUGH_GRADER",
	"GET_READY_TO_READ",
	"PARTICIPATION_MATTERS",
	"EXTRA_CREDIT",
	"GROUP_PROJECTS",
	"AMAZING_LECTURES",
	"CLEAR_GRADING_CRITERIA",
	"GIVES_GOOD_FEEDBACK",
	"INSPIRATIONAL",
	"LOTS_OF_HOMEWORK",
	"HILARIOUS",
	"BEWARE_OF_POP_QUIZZES",
	"SO_MANY_PAPERS",
	"CARING",
	"RESPECTED",
	"LECTURE_HEAVY",
	"GRADED_BY_FEW_THINGS",
	"ACCESSIBLE_OUTSIDE_CLASS",
	"ONLINE_SAVVY",
	"TESTS_ARE_TOUGH",
	"TEST_HEAVY",
	"WOULD_TAKE_AGAIN",
	"TESTS_NOT_MANY",
	"SKIP_CLASS_YOU_WONT_PASS",
	"CARES_ABOUT_STUDENTS",
	"RESPECTED_BY_STUDENTS",
	"EXTRA_CREDIT_OFFERED",
}

func (v *EnumsReviewTag) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsReviewTag(value)
	for _, existing := range AllowedEnumsReviewTagEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsReviewTag", value)
}

// NewEnumsReviewTagFromValue returns a pointer to a valid EnumsReviewTag
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsReviewTagFromValue(v string) (*EnumsReviewTag, error) {
	ev := EnumsReviewTag(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsReviewTag: valid values are %v", v, AllowedEnumsReviewTagEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsReviewTag) IsValid() bool {
	for _, existing := range AllowedEnumsReviewTagEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to _36_Enums.ReviewTag value
func (v EnumsReviewTag) Ptr() *EnumsReviewTag {
	return &v
}

type NullableEnumsReviewTag struct {
	value *EnumsReviewTag
	isSet bool
}

func (v NullableEnumsReviewTag) Get() *EnumsReviewTag {
	return v.value
}

func (v *NullableEnumsReviewTag) Set(val *EnumsReviewTag) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsReviewTag) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsReviewTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsReviewTag(val *EnumsReviewTag) *NullableEnumsReviewTag {
	return &NullableEnumsReviewTag{value: val, isSet: true}
}

func (v NullableEnumsReviewTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsReviewTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
