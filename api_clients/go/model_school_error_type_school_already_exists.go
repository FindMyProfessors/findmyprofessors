/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SchoolErrorTypeSCHOOLALREADYEXISTS the model 'SchoolErrorTypeSCHOOLALREADYEXISTS'
type SchoolErrorTypeSCHOOLALREADYEXISTS string

// List of SchoolErrorType.SCHOOL_ALREADY_EXISTS
const (
	SCHOOL_ALREADY_EXISTS SchoolErrorTypeSCHOOLALREADYEXISTS = "SCHOOL_ALREADY_EXISTS"
)

// All allowed values of SchoolErrorTypeSCHOOLALREADYEXISTS enum
var AllowedSchoolErrorTypeSCHOOLALREADYEXISTSEnumValues = []SchoolErrorTypeSCHOOLALREADYEXISTS{
	"SCHOOL_ALREADY_EXISTS",
}

func (v *SchoolErrorTypeSCHOOLALREADYEXISTS) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchoolErrorTypeSCHOOLALREADYEXISTS(value)
	for _, existing := range AllowedSchoolErrorTypeSCHOOLALREADYEXISTSEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchoolErrorTypeSCHOOLALREADYEXISTS", value)
}

// NewSchoolErrorTypeSCHOOLALREADYEXISTSFromValue returns a pointer to a valid SchoolErrorTypeSCHOOLALREADYEXISTS
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchoolErrorTypeSCHOOLALREADYEXISTSFromValue(v string) (*SchoolErrorTypeSCHOOLALREADYEXISTS, error) {
	ev := SchoolErrorTypeSCHOOLALREADYEXISTS(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchoolErrorTypeSCHOOLALREADYEXISTS: valid values are %v", v, AllowedSchoolErrorTypeSCHOOLALREADYEXISTSEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchoolErrorTypeSCHOOLALREADYEXISTS) IsValid() bool {
	for _, existing := range AllowedSchoolErrorTypeSCHOOLALREADYEXISTSEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SchoolErrorType.SCHOOL_ALREADY_EXISTS value
func (v SchoolErrorTypeSCHOOLALREADYEXISTS) Ptr() *SchoolErrorTypeSCHOOLALREADYEXISTS {
	return &v
}

type NullableSchoolErrorTypeSCHOOLALREADYEXISTS struct {
	value *SchoolErrorTypeSCHOOLALREADYEXISTS
	isSet bool
}

func (v NullableSchoolErrorTypeSCHOOLALREADYEXISTS) Get() *SchoolErrorTypeSCHOOLALREADYEXISTS {
	return v.value
}

func (v *NullableSchoolErrorTypeSCHOOLALREADYEXISTS) Set(val *SchoolErrorTypeSCHOOLALREADYEXISTS) {
	v.value = val
	v.isSet = true
}

func (v NullableSchoolErrorTypeSCHOOLALREADYEXISTS) IsSet() bool {
	return v.isSet
}

func (v *NullableSchoolErrorTypeSCHOOLALREADYEXISTS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchoolErrorTypeSCHOOLALREADYEXISTS(val *SchoolErrorTypeSCHOOLALREADYEXISTS) *NullableSchoolErrorTypeSCHOOLALREADYEXISTS {
	return &NullableSchoolErrorTypeSCHOOLALREADYEXISTS{value: val, isSet: true}
}

func (v NullableSchoolErrorTypeSCHOOLALREADYEXISTS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchoolErrorTypeSCHOOLALREADYEXISTS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

