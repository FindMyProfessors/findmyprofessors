/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AuthErrorTypeINVALIDPASSWORD the model 'AuthErrorTypeINVALIDPASSWORD'
type AuthErrorTypeINVALIDPASSWORD string

// List of AuthErrorType.INVALID_PASSWORD
const (
	INVALID_PASSWORD AuthErrorTypeINVALIDPASSWORD = "INVALID_PASSWORD"
)

// All allowed values of AuthErrorTypeINVALIDPASSWORD enum
var AllowedAuthErrorTypeINVALIDPASSWORDEnumValues = []AuthErrorTypeINVALIDPASSWORD{
	"INVALID_PASSWORD",
}

func (v *AuthErrorTypeINVALIDPASSWORD) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthErrorTypeINVALIDPASSWORD(value)
	for _, existing := range AllowedAuthErrorTypeINVALIDPASSWORDEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthErrorTypeINVALIDPASSWORD", value)
}

// NewAuthErrorTypeINVALIDPASSWORDFromValue returns a pointer to a valid AuthErrorTypeINVALIDPASSWORD
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthErrorTypeINVALIDPASSWORDFromValue(v string) (*AuthErrorTypeINVALIDPASSWORD, error) {
	ev := AuthErrorTypeINVALIDPASSWORD(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthErrorTypeINVALIDPASSWORD: valid values are %v", v, AllowedAuthErrorTypeINVALIDPASSWORDEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthErrorTypeINVALIDPASSWORD) IsValid() bool {
	for _, existing := range AllowedAuthErrorTypeINVALIDPASSWORDEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthErrorType.INVALID_PASSWORD value
func (v AuthErrorTypeINVALIDPASSWORD) Ptr() *AuthErrorTypeINVALIDPASSWORD {
	return &v
}

type NullableAuthErrorTypeINVALIDPASSWORD struct {
	value *AuthErrorTypeINVALIDPASSWORD
	isSet bool
}

func (v NullableAuthErrorTypeINVALIDPASSWORD) Get() *AuthErrorTypeINVALIDPASSWORD {
	return v.value
}

func (v *NullableAuthErrorTypeINVALIDPASSWORD) Set(val *AuthErrorTypeINVALIDPASSWORD) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthErrorTypeINVALIDPASSWORD) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthErrorTypeINVALIDPASSWORD) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthErrorTypeINVALIDPASSWORD(val *AuthErrorTypeINVALIDPASSWORD) *NullableAuthErrorTypeINVALIDPASSWORD {
	return &NullableAuthErrorTypeINVALIDPASSWORD{value: val, isSet: true}
}

func (v NullableAuthErrorTypeINVALIDPASSWORD) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthErrorTypeINVALIDPASSWORD) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

