/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// 36EnumsSemester the model '36EnumsSemester'
type 36EnumsSemester string

// List of _36_Enums.Semester
const (
	SPRING 36EnumsSemester = "SPRING"
	SUMMER 36EnumsSemester = "SUMMER"
	FALL 36EnumsSemester = "FALL"
)

// All allowed values of 36EnumsSemester enum
var Allowed36EnumsSemesterEnumValues = []36EnumsSemester{
	"SPRING",
	"SUMMER",
	"FALL",
}

func (v *36EnumsSemester) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := 36EnumsSemester(value)
	for _, existing := range Allowed36EnumsSemesterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid 36EnumsSemester", value)
}

// New36EnumsSemesterFromValue returns a pointer to a valid 36EnumsSemester
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func New36EnumsSemesterFromValue(v string) (*36EnumsSemester, error) {
	ev := 36EnumsSemester(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for 36EnumsSemester: valid values are %v", v, Allowed36EnumsSemesterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v 36EnumsSemester) IsValid() bool {
	for _, existing := range Allowed36EnumsSemesterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to _36_Enums.Semester value
func (v 36EnumsSemester) Ptr() *36EnumsSemester {
	return &v
}

type Nullable36EnumsSemester struct {
	value *36EnumsSemester
	isSet bool
}

func (v Nullable36EnumsSemester) Get() *36EnumsSemester {
	return v.value
}

func (v *Nullable36EnumsSemester) Set(val *36EnumsSemester) {
	v.value = val
	v.isSet = true
}

func (v Nullable36EnumsSemester) IsSet() bool {
	return v.isSet
}

func (v *Nullable36EnumsSemester) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullable36EnumsSemester(val *36EnumsSemester) *Nullable36EnumsSemester {
	return &Nullable36EnumsSemester{value: val, isSet: true}
}

func (v Nullable36EnumsSemester) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *Nullable36EnumsSemester) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

