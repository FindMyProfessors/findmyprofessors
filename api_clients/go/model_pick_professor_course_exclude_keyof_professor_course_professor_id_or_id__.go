/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId{}

// PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId From T, pick a set of properties whose keys are in the union K
type PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId struct {
	CourseId int32              `json:"course_id"`
	Year     int32              `json:"year"`
	Semester ModelEnumsSemester `json:"semester"`
}

type _PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId

// NewPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId instantiates a new PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId(courseId int32, year int32, semester ModelEnumsSemester) *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId {
	this := PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId{}
	this.CourseId = courseId
	this.Year = year
	this.Semester = semester
	return &this
}

// NewPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdWithDefaults instantiates a new PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrIdWithDefaults() *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId {
	this := PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId{}
	return &this
}

// GetCourseId returns the CourseId field value
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) GetCourseId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CourseId
}

// GetCourseIdOk returns a tuple with the CourseId field value
// and a boolean to check if the value has been set.
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) GetCourseIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CourseId, true
}

// SetCourseId sets field value
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) SetCourseId(v int32) {
	o.CourseId = v
}

// GetYear returns the Year field value
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) GetYear() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) GetYearOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) SetYear(v int32) {
	o.Year = v
}

// GetSemester returns the Semester field value
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) GetSemester() ModelEnumsSemester {
	if o == nil {
		var ret ModelEnumsSemester
		return ret
	}

	return o.Semester
}

// GetSemesterOk returns a tuple with the Semester field value
// and a boolean to check if the value has been set.
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) GetSemesterOk() (*ModelEnumsSemester, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Semester, true
}

// SetSemester sets field value
func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) SetSemester(v ModelEnumsSemester) {
	o.Semester = v
}

func (o PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["course_id"] = o.CourseId
	toSerialize["year"] = o.Year
	toSerialize["semester"] = o.Semester
	return toSerialize, nil
}

func (o *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"course_id",
		"year",
		"semester",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId := _PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId)

	if err != nil {
		return err
	}

	*o = PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId(varPickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId)

	return err
}

type NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId struct {
	value *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId
	isSet bool
}

func (v NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) Get() *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId {
	return v.value
}

func (v *NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) Set(val *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) {
	v.value = val
	v.isSet = true
}

func (v NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) IsSet() bool {
	return v.isSet
}

func (v *NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId(val *PickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) *NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId {
	return &NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId{value: val, isSet: true}
}

func (v NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePickProfessorCourseExcludeKeyofProfessorCourseProfessorIdOrId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
