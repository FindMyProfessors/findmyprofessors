/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsGrade the model 'EnumsGrade'
type EnumsGrade string

// List of __Enums.Grade
const (
	A_PLUS     EnumsGrade = "A_PLUS"
	A          EnumsGrade = "A"
	A_MINUS    EnumsGrade = "A_MINUS"
	B_PLUS     EnumsGrade = "B_PLUS"
	B          EnumsGrade = "B"
	B_MINUS    EnumsGrade = "B_MINUS"
	C_PLUS     EnumsGrade = "C_PLUS"
	C          EnumsGrade = "C"
	C_MINUS    EnumsGrade = "C_MINUS"
	D_PLUS     EnumsGrade = "D_PLUS"
	D          EnumsGrade = "D"
	D_MINUS    EnumsGrade = "D_MINUS"
	F_PLUS     EnumsGrade = "F_PLUS"
	F          EnumsGrade = "F"
	F_MINUS    EnumsGrade = "F_MINUS"
	INCOMPLETE EnumsGrade = "INCOMPLETE"
	WITHDRAWN  EnumsGrade = "WITHDRAWN"
	NOT_SURE   EnumsGrade = "NOT_SURE"
	OTHER      EnumsGrade = "OTHER"
)

// All allowed values of EnumsGrade enum
var AllowedEnumsGradeEnumValues = []EnumsGrade{
	"A_PLUS",
	"A",
	"A_MINUS",
	"B_PLUS",
	"B",
	"B_MINUS",
	"C_PLUS",
	"C",
	"C_MINUS",
	"D_PLUS",
	"D",
	"D_MINUS",
	"F_PLUS",
	"F",
	"F_MINUS",
	"INCOMPLETE",
	"WITHDRAWN",
	"NOT_SURE",
	"OTHER",
}

func (v *EnumsGrade) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsGrade(value)
	for _, existing := range AllowedEnumsGradeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsGrade", value)
}

// NewEnumsGradeFromValue returns a pointer to a valid EnumsGrade
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsGradeFromValue(v string) (*EnumsGrade, error) {
	ev := EnumsGrade(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsGrade: valid values are %v", v, AllowedEnumsGradeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsGrade) IsValid() bool {
	for _, existing := range AllowedEnumsGradeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to __Enums.Grade value
func (v EnumsGrade) Ptr() *EnumsGrade {
	return &v
}

type NullableEnumsGrade struct {
	value *EnumsGrade
	isSet bool
}

func (v NullableEnumsGrade) Get() *EnumsGrade {
	return v.value
}

func (v *NullableEnumsGrade) Set(val *EnumsGrade) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsGrade) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsGrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsGrade(val *EnumsGrade) *NullableEnumsGrade {
	return &NullableEnumsGrade{value: val, isSet: true}
}

func (v NullableEnumsGrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsGrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
