/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TagAmount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagAmount{}

// TagAmount struct for TagAmount
type TagAmount struct {
	Amount float64 `json:"amount"`
	Tag Model36EnumsReviewTag `json:"tag"`
}

type _TagAmount TagAmount

// NewTagAmount instantiates a new TagAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagAmount(amount float64, tag Model36EnumsReviewTag) *TagAmount {
	this := TagAmount{}
	this.Amount = amount
	this.Tag = tag
	return &this
}

// NewTagAmountWithDefaults instantiates a new TagAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagAmountWithDefaults() *TagAmount {
	this := TagAmount{}
	return &this
}

// GetAmount returns the Amount field value
func (o *TagAmount) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TagAmount) GetAmountOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TagAmount) SetAmount(v float64) {
	o.Amount = v
}

// GetTag returns the Tag field value
func (o *TagAmount) GetTag() Model36EnumsReviewTag {
	if o == nil {
		var ret Model36EnumsReviewTag
		return ret
	}

	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value
// and a boolean to check if the value has been set.
func (o *TagAmount) GetTagOk() (*Model36EnumsReviewTag, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tag, true
}

// SetTag sets field value
func (o *TagAmount) SetTag(v Model36EnumsReviewTag) {
	o.Tag = v
}

func (o TagAmount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagAmount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	toSerialize["tag"] = o.Tag
	return toSerialize, nil
}

func (o *TagAmount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"tag",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTagAmount := _TagAmount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTagAmount)

	if err != nil {
		return err
	}

	*o = TagAmount(varTagAmount)

	return err
}

type NullableTagAmount struct {
	value *TagAmount
	isSet bool
}

func (v NullableTagAmount) Get() *TagAmount {
	return v.value
}

func (v *NullableTagAmount) Set(val *TagAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableTagAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableTagAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagAmount(val *TagAmount) *NullableTagAmount {
	return &NullableTagAmount{value: val, isSet: true}
}

func (v NullableTagAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


