/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProfessorErrorTypePROFESSORNOTFOUND the model 'ProfessorErrorTypePROFESSORNOTFOUND'
type ProfessorErrorTypePROFESSORNOTFOUND string

// List of ProfessorErrorType.PROFESSOR_NOT_FOUND
const (
	PROFESSOR_NOT_FOUND ProfessorErrorTypePROFESSORNOTFOUND = "PROFESSOR_NOT_FOUND"
)

// All allowed values of ProfessorErrorTypePROFESSORNOTFOUND enum
var AllowedProfessorErrorTypePROFESSORNOTFOUNDEnumValues = []ProfessorErrorTypePROFESSORNOTFOUND{
	"PROFESSOR_NOT_FOUND",
}

func (v *ProfessorErrorTypePROFESSORNOTFOUND) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfessorErrorTypePROFESSORNOTFOUND(value)
	for _, existing := range AllowedProfessorErrorTypePROFESSORNOTFOUNDEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfessorErrorTypePROFESSORNOTFOUND", value)
}

// NewProfessorErrorTypePROFESSORNOTFOUNDFromValue returns a pointer to a valid ProfessorErrorTypePROFESSORNOTFOUND
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfessorErrorTypePROFESSORNOTFOUNDFromValue(v string) (*ProfessorErrorTypePROFESSORNOTFOUND, error) {
	ev := ProfessorErrorTypePROFESSORNOTFOUND(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfessorErrorTypePROFESSORNOTFOUND: valid values are %v", v, AllowedProfessorErrorTypePROFESSORNOTFOUNDEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfessorErrorTypePROFESSORNOTFOUND) IsValid() bool {
	for _, existing := range AllowedProfessorErrorTypePROFESSORNOTFOUNDEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProfessorErrorType.PROFESSOR_NOT_FOUND value
func (v ProfessorErrorTypePROFESSORNOTFOUND) Ptr() *ProfessorErrorTypePROFESSORNOTFOUND {
	return &v
}

type NullableProfessorErrorTypePROFESSORNOTFOUND struct {
	value *ProfessorErrorTypePROFESSORNOTFOUND
	isSet bool
}

func (v NullableProfessorErrorTypePROFESSORNOTFOUND) Get() *ProfessorErrorTypePROFESSORNOTFOUND {
	return v.value
}

func (v *NullableProfessorErrorTypePROFESSORNOTFOUND) Set(val *ProfessorErrorTypePROFESSORNOTFOUND) {
	v.value = val
	v.isSet = true
}

func (v NullableProfessorErrorTypePROFESSORNOTFOUND) IsSet() bool {
	return v.isSet
}

func (v *NullableProfessorErrorTypePROFESSORNOTFOUND) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfessorErrorTypePROFESSORNOTFOUND(val *ProfessorErrorTypePROFESSORNOTFOUND) *NullableProfessorErrorTypePROFESSORNOTFOUND {
	return &NullableProfessorErrorTypePROFESSORNOTFOUND{value: val, isSet: true}
}

func (v NullableProfessorErrorTypePROFESSORNOTFOUND) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfessorErrorTypePROFESSORNOTFOUND) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
