/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProfessorErrorType the model 'ProfessorErrorType'
type ProfessorErrorType string

// List of ProfessorErrorType
const (
	NOT_FOUND      ProfessorErrorType = "PROFESSOR_NOT_FOUND"
	ALREADY_EXISTS ProfessorErrorType = "PROFESSOR_ALREADY_EXISTS"
)

// All allowed values of ProfessorErrorType enum
var AllowedProfessorErrorTypeEnumValues = []ProfessorErrorType{
	"PROFESSOR_NOT_FOUND",
	"PROFESSOR_ALREADY_EXISTS",
}

func (v *ProfessorErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfessorErrorType(value)
	for _, existing := range AllowedProfessorErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfessorErrorType", value)
}

// NewProfessorErrorTypeFromValue returns a pointer to a valid ProfessorErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfessorErrorTypeFromValue(v string) (*ProfessorErrorType, error) {
	ev := ProfessorErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfessorErrorType: valid values are %v", v, AllowedProfessorErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfessorErrorType) IsValid() bool {
	for _, existing := range AllowedProfessorErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProfessorErrorType value
func (v ProfessorErrorType) Ptr() *ProfessorErrorType {
	return &v
}

type NullableProfessorErrorType struct {
	value *ProfessorErrorType
	isSet bool
}

func (v NullableProfessorErrorType) Get() *ProfessorErrorType {
	return v.value
}

func (v *NullableProfessorErrorType) Set(val *ProfessorErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableProfessorErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableProfessorErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfessorErrorType(val *ProfessorErrorType) *NullableProfessorErrorType {
	return &NullableProfessorErrorType{value: val, isSet: true}
}

func (v NullableProfessorErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfessorErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
