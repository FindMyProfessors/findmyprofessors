/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AuthErrorType the model 'AuthErrorType'
type AuthErrorType string

// List of AuthErrorType
const (
	INVALID_PASSWORD           AuthErrorType = "INVALID_PASSWORD"
	PASSWORD_TOO_SHORT         AuthErrorType = "PASSWORD_TOO_SHORT"
	PASSWORD_TOO_LONG          AuthErrorType = "PASSWORD_TOO_LONG"
	PASSWORD_MISSING_UPPERCASE AuthErrorType = "PASSWORD_MISSING_UPPERCASE"
	PASSWORD_MISSING_NUMBER    AuthErrorType = "PASSWORD_MISSING_NUMBER"
	USER_NOT_FOUND             AuthErrorType = "USER_NOT_FOUND"
	USER_ALREADY_EXISTS        AuthErrorType = "USER_ALREADY_EXISTS"
	UNAUTHORIZED               AuthErrorType = "UNAUTHORIZED"
	INVALID_USERNAME           AuthErrorType = "INVALID_USERNAME"
	INVALID_TOKEN              AuthErrorType = "INVALID_TOKEN"
	UNABLE_TO_CREATE_JWT       AuthErrorType = "UNABLE_TO_CREATE_JWT"
	UNKNOWN__ERROR             AuthErrorType = "UNKNOWN_ ERROR"
)

// All allowed values of AuthErrorType enum
var AllowedAuthErrorTypeEnumValues = []AuthErrorType{
	"INVALID_PASSWORD",
	"PASSWORD_TOO_SHORT",
	"PASSWORD_TOO_LONG",
	"PASSWORD_MISSING_UPPERCASE",
	"PASSWORD_MISSING_NUMBER",
	"USER_NOT_FOUND",
	"USER_ALREADY_EXISTS",
	"UNAUTHORIZED",
	"INVALID_USERNAME",
	"INVALID_TOKEN",
	"UNABLE_TO_CREATE_JWT",
	"UNKNOWN_ ERROR",
}

func (v *AuthErrorType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthErrorType(value)
	for _, existing := range AllowedAuthErrorTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthErrorType", value)
}

// NewAuthErrorTypeFromValue returns a pointer to a valid AuthErrorType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthErrorTypeFromValue(v string) (*AuthErrorType, error) {
	ev := AuthErrorType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthErrorType: valid values are %v", v, AllowedAuthErrorTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthErrorType) IsValid() bool {
	for _, existing := range AllowedAuthErrorTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthErrorType value
func (v AuthErrorType) Ptr() *AuthErrorType {
	return &v
}

type NullableAuthErrorType struct {
	value *AuthErrorType
	isSet bool
}

func (v NullableAuthErrorType) Get() *AuthErrorType {
	return v.value
}

func (v *NullableAuthErrorType) Set(val *AuthErrorType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthErrorType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthErrorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthErrorType(val *AuthErrorType) *NullableAuthErrorType {
	return &NullableAuthErrorType{value: val, isSet: true}
}

func (v NullableAuthErrorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthErrorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
