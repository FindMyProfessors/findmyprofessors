/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ProfessorErrorTypePROFESSORALREADYEXISTS the model 'ProfessorErrorTypePROFESSORALREADYEXISTS'
type ProfessorErrorTypePROFESSORALREADYEXISTS string

// List of ProfessorErrorType.PROFESSOR_ALREADY_EXISTS
const (
	PROFESSOR_ALREADY_EXISTS ProfessorErrorTypePROFESSORALREADYEXISTS = "PROFESSOR_ALREADY_EXISTS"
)

// All allowed values of ProfessorErrorTypePROFESSORALREADYEXISTS enum
var AllowedProfessorErrorTypePROFESSORALREADYEXISTSEnumValues = []ProfessorErrorTypePROFESSORALREADYEXISTS{
	"PROFESSOR_ALREADY_EXISTS",
}

func (v *ProfessorErrorTypePROFESSORALREADYEXISTS) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfessorErrorTypePROFESSORALREADYEXISTS(value)
	for _, existing := range AllowedProfessorErrorTypePROFESSORALREADYEXISTSEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfessorErrorTypePROFESSORALREADYEXISTS", value)
}

// NewProfessorErrorTypePROFESSORALREADYEXISTSFromValue returns a pointer to a valid ProfessorErrorTypePROFESSORALREADYEXISTS
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfessorErrorTypePROFESSORALREADYEXISTSFromValue(v string) (*ProfessorErrorTypePROFESSORALREADYEXISTS, error) {
	ev := ProfessorErrorTypePROFESSORALREADYEXISTS(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfessorErrorTypePROFESSORALREADYEXISTS: valid values are %v", v, AllowedProfessorErrorTypePROFESSORALREADYEXISTSEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfessorErrorTypePROFESSORALREADYEXISTS) IsValid() bool {
	for _, existing := range AllowedProfessorErrorTypePROFESSORALREADYEXISTSEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProfessorErrorType.PROFESSOR_ALREADY_EXISTS value
func (v ProfessorErrorTypePROFESSORALREADYEXISTS) Ptr() *ProfessorErrorTypePROFESSORALREADYEXISTS {
	return &v
}

type NullableProfessorErrorTypePROFESSORALREADYEXISTS struct {
	value *ProfessorErrorTypePROFESSORALREADYEXISTS
	isSet bool
}

func (v NullableProfessorErrorTypePROFESSORALREADYEXISTS) Get() *ProfessorErrorTypePROFESSORALREADYEXISTS {
	return v.value
}

func (v *NullableProfessorErrorTypePROFESSORALREADYEXISTS) Set(val *ProfessorErrorTypePROFESSORALREADYEXISTS) {
	v.value = val
	v.isSet = true
}

func (v NullableProfessorErrorTypePROFESSORALREADYEXISTS) IsSet() bool {
	return v.isSet
}

func (v *NullableProfessorErrorTypePROFESSORALREADYEXISTS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfessorErrorTypePROFESSORALREADYEXISTS(val *ProfessorErrorTypePROFESSORALREADYEXISTS) *NullableProfessorErrorTypePROFESSORALREADYEXISTS {
	return &NullableProfessorErrorTypePROFESSORALREADYEXISTS{value: val, isSet: true}
}

func (v NullableProfessorErrorTypePROFESSORALREADYEXISTS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfessorErrorTypePROFESSORALREADYEXISTS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

