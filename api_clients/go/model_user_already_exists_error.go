/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserAlreadyExistsError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAlreadyExistsError{}

// UserAlreadyExistsError struct for UserAlreadyExistsError
type UserAlreadyExistsError struct {
	Message PickSchoolErrorMessageOrTypeMessage `json:"message"`
	Type AuthErrorTypeUSERALREADYEXISTS `json:"type"`
}

type _UserAlreadyExistsError UserAlreadyExistsError

// NewUserAlreadyExistsError instantiates a new UserAlreadyExistsError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAlreadyExistsError(message PickSchoolErrorMessageOrTypeMessage, type_ AuthErrorTypeUSERALREADYEXISTS) *UserAlreadyExistsError {
	this := UserAlreadyExistsError{}
	this.Message = message
	this.Type = type_
	return &this
}

// NewUserAlreadyExistsErrorWithDefaults instantiates a new UserAlreadyExistsError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAlreadyExistsErrorWithDefaults() *UserAlreadyExistsError {
	this := UserAlreadyExistsError{}
	return &this
}

// GetMessage returns the Message field value
func (o *UserAlreadyExistsError) GetMessage() PickSchoolErrorMessageOrTypeMessage {
	if o == nil {
		var ret PickSchoolErrorMessageOrTypeMessage
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *UserAlreadyExistsError) GetMessageOk() (*PickSchoolErrorMessageOrTypeMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *UserAlreadyExistsError) SetMessage(v PickSchoolErrorMessageOrTypeMessage) {
	o.Message = v
}

// GetType returns the Type field value
func (o *UserAlreadyExistsError) GetType() AuthErrorTypeUSERALREADYEXISTS {
	if o == nil {
		var ret AuthErrorTypeUSERALREADYEXISTS
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserAlreadyExistsError) GetTypeOk() (*AuthErrorTypeUSERALREADYEXISTS, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserAlreadyExistsError) SetType(v AuthErrorTypeUSERALREADYEXISTS) {
	o.Type = v
}

func (o UserAlreadyExistsError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAlreadyExistsError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *UserAlreadyExistsError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserAlreadyExistsError := _UserAlreadyExistsError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserAlreadyExistsError)

	if err != nil {
		return err
	}

	*o = UserAlreadyExistsError(varUserAlreadyExistsError)

	return err
}

type NullableUserAlreadyExistsError struct {
	value *UserAlreadyExistsError
	isSet bool
}

func (v NullableUserAlreadyExistsError) Get() *UserAlreadyExistsError {
	return v.value
}

func (v *NullableUserAlreadyExistsError) Set(val *UserAlreadyExistsError) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAlreadyExistsError) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAlreadyExistsError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAlreadyExistsError(val *UserAlreadyExistsError) *NullableUserAlreadyExistsError {
	return &NullableUserAlreadyExistsError{value: val, isSet: true}
}

func (v NullableUserAlreadyExistsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAlreadyExistsError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


