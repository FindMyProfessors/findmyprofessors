/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EnumsUserRole the model 'EnumsUserRole'
type EnumsUserRole string

// List of __Enums.UserRole
const (
	ADMIN  EnumsUserRole = "ADMIN"
	NORMAL EnumsUserRole = "NORMAL"
)

// All allowed values of EnumsUserRole enum
var AllowedEnumsUserRoleEnumValues = []EnumsUserRole{
	"ADMIN",
	"NORMAL",
}

func (v *EnumsUserRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumsUserRole(value)
	for _, existing := range AllowedEnumsUserRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumsUserRole", value)
}

// NewEnumsUserRoleFromValue returns a pointer to a valid EnumsUserRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumsUserRoleFromValue(v string) (*EnumsUserRole, error) {
	ev := EnumsUserRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumsUserRole: valid values are %v", v, AllowedEnumsUserRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumsUserRole) IsValid() bool {
	for _, existing := range AllowedEnumsUserRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to __Enums.UserRole value
func (v EnumsUserRole) Ptr() *EnumsUserRole {
	return &v
}

type NullableEnumsUserRole struct {
	value *EnumsUserRole
	isSet bool
}

func (v NullableEnumsUserRole) Get() *EnumsUserRole {
	return v.value
}

func (v *NullableEnumsUserRole) Set(val *EnumsUserRole) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumsUserRole) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumsUserRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumsUserRole(val *EnumsUserRole) *NullableEnumsUserRole {
	return &NullableEnumsUserRole{value: val, isSet: true}
}

func (v NullableEnumsUserRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumsUserRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
