/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// 36EnumsUserRole the model '36EnumsUserRole'
type 36EnumsUserRole string

// List of _36_Enums.UserRole
const (
	ADMIN 36EnumsUserRole = "ADMIN"
	NORMAL 36EnumsUserRole = "NORMAL"
)

// All allowed values of 36EnumsUserRole enum
var Allowed36EnumsUserRoleEnumValues = []36EnumsUserRole{
	"ADMIN",
	"NORMAL",
}

func (v *36EnumsUserRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := 36EnumsUserRole(value)
	for _, existing := range Allowed36EnumsUserRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid 36EnumsUserRole", value)
}

// New36EnumsUserRoleFromValue returns a pointer to a valid 36EnumsUserRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func New36EnumsUserRoleFromValue(v string) (*36EnumsUserRole, error) {
	ev := 36EnumsUserRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for 36EnumsUserRole: valid values are %v", v, Allowed36EnumsUserRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v 36EnumsUserRole) IsValid() bool {
	for _, existing := range Allowed36EnumsUserRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to _36_Enums.UserRole value
func (v 36EnumsUserRole) Ptr() *36EnumsUserRole {
	return &v
}

type Nullable36EnumsUserRole struct {
	value *36EnumsUserRole
	isSet bool
}

func (v Nullable36EnumsUserRole) Get() *36EnumsUserRole {
	return v.value
}

func (v *Nullable36EnumsUserRole) Set(val *36EnumsUserRole) {
	v.value = val
	v.isSet = true
}

func (v Nullable36EnumsUserRole) IsSet() bool {
	return v.isSet
}

func (v *Nullable36EnumsUserRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullable36EnumsUserRole(val *36EnumsUserRole) *Nullable36EnumsUserRole {
	return &Nullable36EnumsUserRole{value: val, isSet: true}
}

func (v Nullable36EnumsUserRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *Nullable36EnumsUserRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

