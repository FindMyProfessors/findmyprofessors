/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CourseAlreadyExistsError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CourseAlreadyExistsError{}

// CourseAlreadyExistsError struct for CourseAlreadyExistsError
type CourseAlreadyExistsError struct {
	Message PickSchoolErrorMessageOrTypeMessage `json:"message"`
	Type    CourseErrorTypeCOURSEALREADYEXISTS  `json:"type"`
}

type _CourseAlreadyExistsError CourseAlreadyExistsError

// NewCourseAlreadyExistsError instantiates a new CourseAlreadyExistsError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCourseAlreadyExistsError(message PickSchoolErrorMessageOrTypeMessage, type_ CourseErrorTypeCOURSEALREADYEXISTS) *CourseAlreadyExistsError {
	this := CourseAlreadyExistsError{}
	this.Message = message
	this.Type = type_
	return &this
}

// NewCourseAlreadyExistsErrorWithDefaults instantiates a new CourseAlreadyExistsError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCourseAlreadyExistsErrorWithDefaults() *CourseAlreadyExistsError {
	this := CourseAlreadyExistsError{}
	return &this
}

// GetMessage returns the Message field value
func (o *CourseAlreadyExistsError) GetMessage() PickSchoolErrorMessageOrTypeMessage {
	if o == nil {
		var ret PickSchoolErrorMessageOrTypeMessage
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CourseAlreadyExistsError) GetMessageOk() (*PickSchoolErrorMessageOrTypeMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CourseAlreadyExistsError) SetMessage(v PickSchoolErrorMessageOrTypeMessage) {
	o.Message = v
}

// GetType returns the Type field value
func (o *CourseAlreadyExistsError) GetType() CourseErrorTypeCOURSEALREADYEXISTS {
	if o == nil {
		var ret CourseErrorTypeCOURSEALREADYEXISTS
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CourseAlreadyExistsError) GetTypeOk() (*CourseErrorTypeCOURSEALREADYEXISTS, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CourseAlreadyExistsError) SetType(v CourseErrorTypeCOURSEALREADYEXISTS) {
	o.Type = v
}

func (o CourseAlreadyExistsError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CourseAlreadyExistsError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *CourseAlreadyExistsError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCourseAlreadyExistsError := _CourseAlreadyExistsError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCourseAlreadyExistsError)

	if err != nil {
		return err
	}

	*o = CourseAlreadyExistsError(varCourseAlreadyExistsError)

	return err
}

type NullableCourseAlreadyExistsError struct {
	value *CourseAlreadyExistsError
	isSet bool
}

func (v NullableCourseAlreadyExistsError) Get() *CourseAlreadyExistsError {
	return v.value
}

func (v *NullableCourseAlreadyExistsError) Set(val *CourseAlreadyExistsError) {
	v.value = val
	v.isSet = true
}

func (v NullableCourseAlreadyExistsError) IsSet() bool {
	return v.isSet
}

func (v *NullableCourseAlreadyExistsError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCourseAlreadyExistsError(val *CourseAlreadyExistsError) *NullableCourseAlreadyExistsError {
	return &NullableCourseAlreadyExistsError{value: val, isSet: true}
}

func (v NullableCourseAlreadyExistsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCourseAlreadyExistsError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
