/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AuthErrorTypeUSERALREADYEXISTS the model 'AuthErrorTypeUSERALREADYEXISTS'
type AuthErrorTypeUSERALREADYEXISTS string

// List of AuthErrorType.USER_ALREADY_EXISTS
const (
	USER_ALREADY_EXISTS AuthErrorTypeUSERALREADYEXISTS = "USER_ALREADY_EXISTS"
)

// All allowed values of AuthErrorTypeUSERALREADYEXISTS enum
var AllowedAuthErrorTypeUSERALREADYEXISTSEnumValues = []AuthErrorTypeUSERALREADYEXISTS{
	"USER_ALREADY_EXISTS",
}

func (v *AuthErrorTypeUSERALREADYEXISTS) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuthErrorTypeUSERALREADYEXISTS(value)
	for _, existing := range AllowedAuthErrorTypeUSERALREADYEXISTSEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuthErrorTypeUSERALREADYEXISTS", value)
}

// NewAuthErrorTypeUSERALREADYEXISTSFromValue returns a pointer to a valid AuthErrorTypeUSERALREADYEXISTS
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuthErrorTypeUSERALREADYEXISTSFromValue(v string) (*AuthErrorTypeUSERALREADYEXISTS, error) {
	ev := AuthErrorTypeUSERALREADYEXISTS(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuthErrorTypeUSERALREADYEXISTS: valid values are %v", v, AllowedAuthErrorTypeUSERALREADYEXISTSEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuthErrorTypeUSERALREADYEXISTS) IsValid() bool {
	for _, existing := range AllowedAuthErrorTypeUSERALREADYEXISTSEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuthErrorType.USER_ALREADY_EXISTS value
func (v AuthErrorTypeUSERALREADYEXISTS) Ptr() *AuthErrorTypeUSERALREADYEXISTS {
	return &v
}

type NullableAuthErrorTypeUSERALREADYEXISTS struct {
	value *AuthErrorTypeUSERALREADYEXISTS
	isSet bool
}

func (v NullableAuthErrorTypeUSERALREADYEXISTS) Get() *AuthErrorTypeUSERALREADYEXISTS {
	return v.value
}

func (v *NullableAuthErrorTypeUSERALREADYEXISTS) Set(val *AuthErrorTypeUSERALREADYEXISTS) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthErrorTypeUSERALREADYEXISTS) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthErrorTypeUSERALREADYEXISTS) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthErrorTypeUSERALREADYEXISTS(val *AuthErrorTypeUSERALREADYEXISTS) *NullableAuthErrorTypeUSERALREADYEXISTS {
	return &NullableAuthErrorTypeUSERALREADYEXISTS{value: val, isSet: true}
}

func (v NullableAuthErrorTypeUSERALREADYEXISTS) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthErrorTypeUSERALREADYEXISTS) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
