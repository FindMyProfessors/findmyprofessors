/*
api

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PickCourseNameOrCodeOrSchoolId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PickCourseNameOrCodeOrSchoolId{}

// PickCourseNameOrCodeOrSchoolId From T, pick a set of properties whose keys are in the union K
type PickCourseNameOrCodeOrSchoolId struct {
	Name     string `json:"name"`
	SchoolId int32  `json:"school_id"`
	Code     string `json:"code"`
}

type _PickCourseNameOrCodeOrSchoolId PickCourseNameOrCodeOrSchoolId

// NewPickCourseNameOrCodeOrSchoolId instantiates a new PickCourseNameOrCodeOrSchoolId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPickCourseNameOrCodeOrSchoolId(name string, schoolId int32, code string) *PickCourseNameOrCodeOrSchoolId {
	this := PickCourseNameOrCodeOrSchoolId{}
	this.Name = name
	this.SchoolId = schoolId
	this.Code = code
	return &this
}

// NewPickCourseNameOrCodeOrSchoolIdWithDefaults instantiates a new PickCourseNameOrCodeOrSchoolId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPickCourseNameOrCodeOrSchoolIdWithDefaults() *PickCourseNameOrCodeOrSchoolId {
	this := PickCourseNameOrCodeOrSchoolId{}
	return &this
}

// GetName returns the Name field value
func (o *PickCourseNameOrCodeOrSchoolId) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PickCourseNameOrCodeOrSchoolId) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PickCourseNameOrCodeOrSchoolId) SetName(v string) {
	o.Name = v
}

// GetSchoolId returns the SchoolId field value
func (o *PickCourseNameOrCodeOrSchoolId) GetSchoolId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SchoolId
}

// GetSchoolIdOk returns a tuple with the SchoolId field value
// and a boolean to check if the value has been set.
func (o *PickCourseNameOrCodeOrSchoolId) GetSchoolIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SchoolId, true
}

// SetSchoolId sets field value
func (o *PickCourseNameOrCodeOrSchoolId) SetSchoolId(v int32) {
	o.SchoolId = v
}

// GetCode returns the Code field value
func (o *PickCourseNameOrCodeOrSchoolId) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *PickCourseNameOrCodeOrSchoolId) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *PickCourseNameOrCodeOrSchoolId) SetCode(v string) {
	o.Code = v
}

func (o PickCourseNameOrCodeOrSchoolId) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PickCourseNameOrCodeOrSchoolId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["school_id"] = o.SchoolId
	toSerialize["code"] = o.Code
	return toSerialize, nil
}

func (o *PickCourseNameOrCodeOrSchoolId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"school_id",
		"code",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPickCourseNameOrCodeOrSchoolId := _PickCourseNameOrCodeOrSchoolId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPickCourseNameOrCodeOrSchoolId)

	if err != nil {
		return err
	}

	*o = PickCourseNameOrCodeOrSchoolId(varPickCourseNameOrCodeOrSchoolId)

	return err
}

type NullablePickCourseNameOrCodeOrSchoolId struct {
	value *PickCourseNameOrCodeOrSchoolId
	isSet bool
}

func (v NullablePickCourseNameOrCodeOrSchoolId) Get() *PickCourseNameOrCodeOrSchoolId {
	return v.value
}

func (v *NullablePickCourseNameOrCodeOrSchoolId) Set(val *PickCourseNameOrCodeOrSchoolId) {
	v.value = val
	v.isSet = true
}

func (v NullablePickCourseNameOrCodeOrSchoolId) IsSet() bool {
	return v.isSet
}

func (v *NullablePickCourseNameOrCodeOrSchoolId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePickCourseNameOrCodeOrSchoolId(val *PickCourseNameOrCodeOrSchoolId) *NullablePickCourseNameOrCodeOrSchoolId {
	return &NullablePickCourseNameOrCodeOrSchoolId{value: val, isSet: true}
}

func (v NullablePickCourseNameOrCodeOrSchoolId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePickCourseNameOrCodeOrSchoolId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
