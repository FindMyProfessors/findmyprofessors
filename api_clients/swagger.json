{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"_36_Enums.UserRole": {
				"type": "string",
				"enum": [
					"ADMIN",
					"NORMAL"
				]
			},
			"Pick_User.Exclude_keyofUser.password__": {
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"email": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"signup_time": {
						"type": "string",
						"format": "date-time"
					},
					"last_login_time": {
						"type": "string",
						"format": "date-time"
					},
					"account_verified": {
						"type": "boolean"
					},
					"role": {
						"$ref": "#/components/schemas/_36_Enums.UserRole"
					}
				},
				"required": [
					"id",
					"email",
					"username",
					"signup_time",
					"last_login_time",
					"account_verified",
					"role"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_User.password_": {
				"$ref": "#/components/schemas/Pick_User.Exclude_keyofUser.password__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UserResponse": {
				"$ref": "#/components/schemas/Omit_User.password_"
			},
			"Pick_User.Exclude_keyofUser.password-or-signup_time-or-account_verified-or-id-or-last_login_time-or-email-or-role__": {
				"properties": {
					"username": {
						"type": "string"
					}
				},
				"required": [
					"username"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_User.password-or-signup_time-or-account_verified-or-id-or-last_login_time-or-email-or-role_": {
				"$ref": "#/components/schemas/Pick_User.Exclude_keyofUser.password-or-signup_time-or-account_verified-or-id-or-last_login_time-or-email-or-role__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UpdateUserParams": {
				"$ref": "#/components/schemas/Omit_User.password-or-signup_time-or-account_verified-or-id-or-last_login_time-or-email-or-role_"
			},
			"DefaultSelection_Prisma._36_SchoolPayload_": {
				"properties": {
					"name": {
						"type": "string"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					}
				},
				"required": [
					"name",
					"id"
				],
				"type": "object"
			},
			"School": {
				"$ref": "#/components/schemas/DefaultSelection_Prisma._36_SchoolPayload_",
				"description": "Model School"
			},
			"SchoolSearchResult": {
				"properties": {
					"pageInfo": {
						"properties": {
							"total": {
								"type": "integer",
								"format": "int32"
							},
							"endCursor": {
								"type": "string",
								"nullable": true
							},
							"hasNextPage": {
								"type": "boolean"
							}
						},
						"required": [
							"total",
							"endCursor",
							"hasNextPage"
						],
						"type": "object"
					},
					"edges": {
						"items": {
							"properties": {
								"node": {
									"$ref": "#/components/schemas/School"
								},
								"cursor": {
									"type": "string"
								}
							},
							"required": [
								"node",
								"cursor"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"pageInfo",
					"edges"
				],
				"type": "object"
			},
			"SchoolErrorType": {
				"enum": [
					"SCHOOL_NOT_FOUND",
					"SCHOOL_ALREADY_EXISTS"
				],
				"type": "string"
			},
			"Pick_SchoolError.message-or-type_": {
				"properties": {
					"message": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"properties": {},
								"additionalProperties": {
									"type": "string"
								},
								"type": "object"
							}
						]
					},
					"type": {
						"$ref": "#/components/schemas/SchoolErrorType"
					}
				},
				"required": [
					"message",
					"type"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"SchoolErrorType.SCHOOL_ALREADY_EXISTS": {
				"enum": [
					"SCHOOL_ALREADY_EXISTS"
				],
				"type": "string"
			},
			"SchoolAlreadyExistsError": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_SchoolError.message-or-type_"
					},
					{
						"properties": {
							"type": {
								"$ref": "#/components/schemas/SchoolErrorType.SCHOOL_ALREADY_EXISTS"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					}
				]
			},
			"Pick_School.name_": {
				"properties": {
					"name": {
						"type": "string"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"NewSchool": {
				"$ref": "#/components/schemas/Pick_School.name_"
			},
			"SchoolErrorType.SCHOOL_NOT_FOUND": {
				"enum": [
					"SCHOOL_NOT_FOUND"
				],
				"type": "string"
			},
			"SchoolNotFoundError": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_SchoolError.message-or-type_"
					},
					{
						"properties": {
							"type": {
								"$ref": "#/components/schemas/SchoolErrorType.SCHOOL_NOT_FOUND"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					}
				]
			},
			"UpdatedSchool": {
				"$ref": "#/components/schemas/Pick_School.name_"
			},
			"DefaultSelection_Prisma._36_ProfessorPayload_": {
				"properties": {
					"school_id": {
						"type": "integer",
						"format": "int32"
					},
					"rmp_id": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"first_name": {
						"type": "string"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					}
				},
				"required": [
					"school_id",
					"rmp_id",
					"last_name",
					"first_name",
					"id"
				],
				"type": "object"
			},
			"Professor": {
				"$ref": "#/components/schemas/DefaultSelection_Prisma._36_ProfessorPayload_",
				"description": "Model Professor"
			},
			"ProfessorSearchResult": {
				"properties": {
					"pageInfo": {
						"properties": {
							"total": {
								"type": "integer",
								"format": "int32"
							},
							"endCursor": {
								"type": "string",
								"nullable": true
							},
							"hasNextPage": {
								"type": "boolean"
							}
						},
						"required": [
							"total",
							"endCursor",
							"hasNextPage"
						],
						"type": "object"
					},
					"edges": {
						"items": {
							"properties": {
								"node": {
									"$ref": "#/components/schemas/Professor"
								},
								"cursor": {
									"type": "string"
								}
							},
							"required": [
								"node",
								"cursor"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"pageInfo",
					"edges"
				],
				"type": "object"
			},
			"ProfessorErrorType": {
				"enum": [
					"PROFESSOR_NOT_FOUND",
					"PROFESSOR_ALREADY_EXISTS"
				],
				"type": "string"
			},
			"Pick_ProfessorError.message-or-type_": {
				"properties": {
					"message": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"properties": {},
								"additionalProperties": {
									"type": "string"
								},
								"type": "object"
							}
						]
					},
					"type": {
						"$ref": "#/components/schemas/ProfessorErrorType"
					}
				},
				"required": [
					"message",
					"type"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"ProfessorErrorType.PROFESSOR_ALREADY_EXISTS": {
				"enum": [
					"PROFESSOR_ALREADY_EXISTS"
				],
				"type": "string"
			},
			"ProfessorAlreadyExistsError": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_ProfessorError.message-or-type_"
					},
					{
						"properties": {
							"type": {
								"$ref": "#/components/schemas/ProfessorErrorType.PROFESSOR_ALREADY_EXISTS"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					}
				]
			},
			"Pick_Professor.first_name-or-last_name-or-rmp_id-or-school_id_": {
				"properties": {
					"first_name": {
						"type": "string"
					},
					"last_name": {
						"type": "string"
					},
					"rmp_id": {
						"type": "string"
					},
					"school_id": {
						"type": "integer",
						"format": "int32"
					}
				},
				"required": [
					"first_name",
					"last_name",
					"rmp_id",
					"school_id"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"NewProfessor": {
				"$ref": "#/components/schemas/Pick_Professor.first_name-or-last_name-or-rmp_id-or-school_id_"
			},
			"_36_Enums.ReviewTag": {
				"type": "string",
				"enum": [
					"TOUGH_GRADER",
					"GET_READY_TO_READ",
					"PARTICIPATION_MATTERS",
					"EXTRA_CREDIT",
					"GROUP_PROJECTS",
					"AMAZING_LECTURES",
					"CLEAR_GRADING_CRITERIA",
					"GIVES_GOOD_FEEDBACK",
					"INSPIRATIONAL",
					"LOTS_OF_HOMEWORK",
					"HILARIOUS",
					"BEWARE_OF_POP_QUIZZES",
					"SO_MANY_PAPERS",
					"CARING",
					"RESPECTED",
					"LECTURE_HEAVY",
					"GRADED_BY_FEW_THINGS",
					"ACCESSIBLE_OUTSIDE_CLASS",
					"ONLINE_SAVVY",
					"TESTS_ARE_TOUGH",
					"TEST_HEAVY",
					"WOULD_TAKE_AGAIN",
					"TESTS_NOT_MANY",
					"SKIP_CLASS_YOU_WONT_PASS",
					"CARES_ABOUT_STUDENTS",
					"RESPECTED_BY_STUDENTS",
					"EXTRA_CREDIT_OFFERED"
				]
			},
			"ReviewTag": {
				"$ref": "#/components/schemas/_36_Enums.ReviewTag"
			},
			"TagAmount": {
				"properties": {
					"amount": {
						"type": "integer",
						"format": "int32"
					},
					"tag": {
						"$ref": "#/components/schemas/ReviewTag"
					}
				},
				"required": [
					"amount",
					"tag"
				],
				"type": "object"
			},
			"ChartValue": {
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"month": {
						"type": "string"
					},
					"value": {
						"type": "integer",
						"format": "int32"
					}
				},
				"required": [
					"year",
					"month",
					"value"
				],
				"type": "object"
			},
			"ProfessorAnalysis": {
				"properties": {
					"averageRatingValues": {
						"items": {
							"$ref": "#/components/schemas/ChartValue"
						},
						"type": "array"
					},
					"tagAmount": {
						"items": {
							"$ref": "#/components/schemas/TagAmount"
						},
						"type": "array"
					}
				},
				"required": [
					"averageRatingValues",
					"tagAmount"
				],
				"type": "object"
			},
			"ProfessorErrorType.PROFESSOR_NOT_FOUND": {
				"enum": [
					"PROFESSOR_NOT_FOUND"
				],
				"type": "string"
			},
			"ProfessorNotFoundError": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_ProfessorError.message-or-type_"
					},
					{
						"properties": {
							"type": {
								"$ref": "#/components/schemas/ProfessorErrorType.PROFESSOR_NOT_FOUND"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					}
				]
			},
			"_36_Enums.Grade": {
				"type": "string",
				"enum": [
					"A_PLUS",
					"A",
					"A_MINUS",
					"B_PLUS",
					"B",
					"B_MINUS",
					"C_PLUS",
					"C",
					"C_MINUS",
					"D_PLUS",
					"D",
					"D_MINUS",
					"F_PLUS",
					"F",
					"F_MINUS",
					"INCOMPLETE",
					"WITHDRAWN",
					"NOT_SURE",
					"OTHER"
				]
			},
			"Grade": {
				"$ref": "#/components/schemas/_36_Enums.Grade"
			},
			"Rating": {
				"properties": {
					"averageGrade": {
						"$ref": "#/components/schemas/Grade"
					},
					"topKMostRecentDifficultyAverage": {
						"type": "number",
						"format": "float"
					},
					"totalDifficultyAverage": {
						"type": "number",
						"format": "float"
					},
					"topKMostRecentQualityAverage": {
						"type": "number",
						"format": "float"
					},
					"totalQualityAverage": {
						"type": "number",
						"format": "float"
					},
					"ratingAmount": {
						"type": "integer",
						"format": "int32"
					}
				},
				"required": [
					"averageGrade",
					"topKMostRecentDifficultyAverage",
					"totalDifficultyAverage",
					"topKMostRecentQualityAverage",
					"totalQualityAverage",
					"ratingAmount"
				],
				"type": "object"
			},
			"_36_Enums.Semester": {
				"type": "string",
				"enum": [
					"SPRING",
					"SUMMER",
					"FALL"
				]
			},
			"Pick_ProfessorCourse.Exclude_keyofProfessorCourse.professor_id-or-id-or-course_id__": {
				"properties": {
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"semester": {
						"$ref": "#/components/schemas/_36_Enums.Semester"
					}
				},
				"required": [
					"year",
					"semester"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ProfessorCourse.professor_id-or-id-or-course_id_": {
				"$ref": "#/components/schemas/Pick_ProfessorCourse.Exclude_keyofProfessorCourse.professor_id-or-id-or-course_id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"DefaultSelection_Prisma._36_CoursePayload_": {
				"properties": {
					"school_id": {
						"type": "integer",
						"format": "int32"
					},
					"code": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					}
				},
				"required": [
					"school_id",
					"code",
					"name",
					"id"
				],
				"type": "object"
			},
			"Course": {
				"$ref": "#/components/schemas/DefaultSelection_Prisma._36_CoursePayload_",
				"description": "Model Course"
			},
			"ProfessorCourses": {
				"properties": {
					"total": {
						"type": "integer",
						"format": "int32"
					},
					"courses": {
						"items": {
							"allOf": [
								{
									"$ref": "#/components/schemas/Omit_ProfessorCourse.professor_id-or-id-or-course_id_"
								},
								{
									"$ref": "#/components/schemas/Course"
								}
							]
						},
						"type": "array"
					}
				},
				"required": [
					"total",
					"courses"
				],
				"type": "object"
			},
			"Semester": {
				"$ref": "#/components/schemas/_36_Enums.Semester"
			},
			"UpdatedProfessor": {
				"properties": {
					"last_name": {
						"type": "string",
						"nullable": true
					},
					"first_name": {
						"type": "string",
						"nullable": true
					}
				},
				"type": "object"
			},
			"ReviewResponse": {
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32"
					},
					"quality": {
						"type": "number",
						"format": "float"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"tags": {
						"items": {
							"$ref": "#/components/schemas/ReviewTag"
						},
						"type": "array"
					},
					"grade": {
						"$ref": "#/components/schemas/Grade"
					},
					"professor_id": {
						"type": "integer",
						"format": "int32"
					}
				},
				"required": [
					"id",
					"quality",
					"difficulty",
					"time",
					"tags",
					"grade",
					"professor_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReviewsSearchResult": {
				"properties": {
					"pageInfo": {
						"properties": {
							"total": {
								"type": "integer",
								"format": "int32"
							},
							"endCursor": {
								"type": "string",
								"nullable": true
							},
							"hasNextPage": {
								"type": "boolean"
							}
						},
						"required": [
							"total",
							"endCursor",
							"hasNextPage"
						],
						"type": "object"
					},
					"edges": {
						"items": {
							"properties": {
								"node": {
									"$ref": "#/components/schemas/ReviewResponse"
								},
								"cursor": {
									"type": "string"
								}
							},
							"required": [
								"node",
								"cursor"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"pageInfo",
					"edges"
				],
				"type": "object"
			},
			"DefaultSelection_Prisma._36_ProfessorCoursePayload_": {
				"properties": {
					"semester": {
						"$ref": "#/components/schemas/_36_Enums.Semester"
					},
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"course_id": {
						"type": "integer",
						"format": "int32"
					},
					"professor_id": {
						"type": "integer",
						"format": "int32"
					},
					"id": {
						"type": "integer",
						"format": "int32"
					}
				},
				"required": [
					"semester",
					"year",
					"course_id",
					"professor_id",
					"id"
				],
				"type": "object"
			},
			"ProfessorCourse": {
				"$ref": "#/components/schemas/DefaultSelection_Prisma._36_ProfessorCoursePayload_",
				"description": "Model ProfessorCourse"
			},
			"CourseEnrollmentResult": {
				"$ref": "#/components/schemas/ProfessorCourse"
			},
			"Pick_ProfessorCourse.Exclude_keyofProfessorCourse.professor_id-or-id__": {
				"properties": {
					"course_id": {
						"type": "integer",
						"format": "int32"
					},
					"year": {
						"type": "integer",
						"format": "int32"
					},
					"semester": {
						"$ref": "#/components/schemas/_36_Enums.Semester"
					}
				},
				"required": [
					"course_id",
					"year",
					"semester"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ProfessorCourse.professor_id-or-id_": {
				"$ref": "#/components/schemas/Pick_ProfessorCourse.Exclude_keyofProfessorCourse.professor_id-or-id__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CourseEnrollment": {
				"$ref": "#/components/schemas/Omit_ProfessorCourse.professor_id-or-id_"
			},
			"NewReview": {
				"properties": {
					"quality": {
						"type": "number",
						"format": "float"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"tags": {
						"items": {
							"$ref": "#/components/schemas/ReviewTag"
						},
						"type": "array"
					},
					"grade": {
						"$ref": "#/components/schemas/Grade"
					},
					"professor_id": {
						"type": "integer",
						"format": "int32"
					}
				},
				"required": [
					"quality",
					"difficulty",
					"time",
					"tags",
					"grade",
					"professor_id"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReviewErrorType": {
				"enum": [
					"REVIEW_NOT_FOUND"
				],
				"type": "string"
			},
			"Pick_ReviewError.message-or-type_": {
				"properties": {
					"message": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"properties": {},
								"additionalProperties": {
									"type": "string"
								},
								"type": "object"
							}
						]
					},
					"type": {
						"$ref": "#/components/schemas/ReviewErrorType"
					}
				},
				"required": [
					"message",
					"type"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"ReviewErrorType.REVIEW_NOT_FOUND": {
				"enum": [
					"REVIEW_NOT_FOUND"
				],
				"type": "string"
			},
			"ReviewNotFoundError": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_ReviewError.message-or-type_"
					},
					{
						"properties": {
							"type": {
								"$ref": "#/components/schemas/ReviewErrorType.REVIEW_NOT_FOUND"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					}
				]
			},
			"UpdatedReview": {
				"properties": {
					"quality": {
						"type": "number",
						"format": "float"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"time": {
						"type": "string",
						"format": "date-time"
					},
					"tags": {
						"items": {
							"$ref": "#/components/schemas/ReviewTag"
						},
						"type": "array"
					},
					"grade": {
						"$ref": "#/components/schemas/Grade"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"CourseSearchResult": {
				"properties": {
					"pageInfo": {
						"properties": {
							"total": {
								"type": "integer",
								"format": "int32"
							},
							"endCursor": {
								"type": "string",
								"nullable": true
							},
							"hasNextPage": {
								"type": "boolean"
							}
						},
						"required": [
							"total",
							"endCursor",
							"hasNextPage"
						],
						"type": "object"
					},
					"edges": {
						"items": {
							"properties": {
								"node": {
									"$ref": "#/components/schemas/Course"
								},
								"cursor": {
									"type": "string"
								}
							},
							"required": [
								"node",
								"cursor"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"pageInfo",
					"edges"
				],
				"type": "object"
			},
			"CourseErrorType": {
				"enum": [
					"COURSE_NOT_FOUND",
					"COURSE_ALREADY_EXISTS"
				],
				"type": "string"
			},
			"Pick_CourseError.message-or-type_": {
				"properties": {
					"message": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"properties": {},
								"additionalProperties": {
									"type": "string"
								},
								"type": "object"
							}
						]
					},
					"type": {
						"$ref": "#/components/schemas/CourseErrorType"
					}
				},
				"required": [
					"message",
					"type"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"CourseErrorType.COURSE_ALREADY_EXISTS": {
				"enum": [
					"COURSE_ALREADY_EXISTS"
				],
				"type": "string"
			},
			"CourseAlreadyExistsError": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_CourseError.message-or-type_"
					},
					{
						"properties": {
							"type": {
								"$ref": "#/components/schemas/CourseErrorType.COURSE_ALREADY_EXISTS"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					}
				]
			},
			"Pick_Course.name-or-code-or-school_id_": {
				"properties": {
					"name": {
						"type": "string"
					},
					"school_id": {
						"type": "integer",
						"format": "int32"
					},
					"code": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"school_id",
					"code"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"NewCourse": {
				"$ref": "#/components/schemas/Pick_Course.name-or-code-or-school_id_"
			},
			"CourseErrorType.COURSE_NOT_FOUND": {
				"enum": [
					"COURSE_NOT_FOUND"
				],
				"type": "string"
			},
			"CourseNotFoundError": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_CourseError.message-or-type_"
					},
					{
						"properties": {
							"type": {
								"$ref": "#/components/schemas/CourseErrorType.COURSE_NOT_FOUND"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					}
				]
			},
			"Pick_Course.name-or-code_": {
				"properties": {
					"name": {
						"type": "string"
					},
					"code": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"code"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"UpdatedCourse": {
				"$ref": "#/components/schemas/Pick_Course.name-or-code_"
			},
			"CourseProfessors": {
				"properties": {
					"total": {
						"type": "integer",
						"format": "int32"
					},
					"professors": {
						"items": {
							"$ref": "#/components/schemas/Professor"
						},
						"type": "array"
					}
				},
				"required": [
					"total",
					"professors"
				],
				"type": "object"
			},
			"LoginResponse": {
				"properties": {
					"user": {
						"$ref": "#/components/schemas/UserResponse"
					},
					"token": {
						"type": "string"
					}
				},
				"required": [
					"user",
					"token"
				],
				"type": "object"
			},
			"AuthErrorType": {
				"enum": [
					"INVALID_PASSWORD",
					"PASSWORD_TOO_SHORT",
					"PASSWORD_TOO_LONG",
					"PASSWORD_MISSING_UPPERCASE",
					"PASSWORD_MISSING_NUMBER",
					"USER_NOT_FOUND",
					"USER_ALREADY_EXISTS",
					"UNAUTHORIZED",
					"INVALID_USERNAME",
					"INVALID_TOKEN",
					"UNABLE_TO_CREATE_JWT",
					"UNKNOWN_ ERROR"
				],
				"type": "string"
			},
			"Pick_AuthError.message-or-type_": {
				"properties": {
					"message": {
						"anyOf": [
							{
								"type": "string"
							},
							{
								"properties": {},
								"additionalProperties": {
									"type": "string"
								},
								"type": "object"
							}
						]
					},
					"type": {
						"$ref": "#/components/schemas/AuthErrorType"
					}
				},
				"required": [
					"message",
					"type"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"AuthErrorType.USER_ALREADY_EXISTS": {
				"enum": [
					"USER_ALREADY_EXISTS"
				],
				"type": "string"
			},
			"UserAlreadyExistsError": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_AuthError.message-or-type_"
					},
					{
						"properties": {
							"type": {
								"$ref": "#/components/schemas/AuthErrorType.USER_ALREADY_EXISTS"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					}
				]
			},
			"Pick_User.email-or-username-or-password_": {
				"properties": {
					"email": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"username",
					"password"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"RegistrationParams": {
				"$ref": "#/components/schemas/Pick_User.email-or-username-or-password_"
			},
			"AuthErrorType.USER_NOT_FOUND": {
				"enum": [
					"USER_NOT_FOUND"
				],
				"type": "string"
			},
			"UserNotFoundError": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_AuthError.message-or-type_"
					},
					{
						"properties": {
							"type": {
								"$ref": "#/components/schemas/AuthErrorType.USER_NOT_FOUND"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					}
				]
			},
			"AuthErrorType.INVALID_PASSWORD": {
				"enum": [
					"INVALID_PASSWORD"
				],
				"type": "string"
			},
			"InvalidPasswordError": {
				"allOf": [
					{
						"$ref": "#/components/schemas/Pick_AuthError.message-or-type_"
					},
					{
						"properties": {
							"type": {
								"$ref": "#/components/schemas/AuthErrorType.INVALID_PASSWORD"
							}
						},
						"required": [
							"type"
						],
						"type": "object"
					}
				]
			},
			"Pick_User.username-or-password_": {
				"properties": {
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"username",
					"password"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"LoginParams": {
				"$ref": "#/components/schemas/Pick_User.username-or-password_"
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "api",
		"version": "1.0.0",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"paths": {
		"/users/{id}": {
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"id": 1,
											"username": "joedoe",
											"email": "johndoe@gmail.com",
											"signup_time": "2021-03-25T00:00:00.000Z",
											"last_login_time": "2021-03-26T00:00:00.000Z",
											"account_verified": true,
											"role": "NORMAL"
										}
									}
								}
							}
						}
					}
				},
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"204": {
						"description": "User Updated Successfully"
					}
				},
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateUserParams"
							}
						}
					}
				}
			}
		},
		"/users/{id}/cart": {
			"get": {
				"operationId": "GetUserCart",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/UserResponse"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Users"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/schools/search": {
			"get": {
				"operationId": "SearchSchools",
				"responses": {
					"200": {
						"description": "Schools Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchoolSearchResult"
								}
							}
						}
					}
				},
				"tags": [
					"Schools"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "cursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/schools/create": {
			"post": {
				"operationId": "CreateSchool",
				"responses": {
					"201": {
						"description": "School Created Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/School"
								},
								"examples": {
									"Example 1": {
										"value": {
											"id": 1,
											"name": "Example School"
										}
									}
								}
							}
						}
					},
					"409": {
						"description": "School already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchoolAlreadyExistsError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Schools"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewSchool"
							}
						}
					}
				}
			}
		},
		"/schools/{id}": {
			"get": {
				"operationId": "GetSchool",
				"responses": {
					"200": {
						"description": "School Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/School"
								}
							}
						}
					},
					"404": {
						"description": "School not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchoolNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Schools"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateSchool",
				"responses": {
					"200": {
						"description": "School Updated Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/School"
								}
							}
						}
					},
					"404": {
						"description": "School not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchoolNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Schools"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatedSchool"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteSchool",
				"responses": {
					"200": {
						"description": "School Deleted Successfully"
					},
					"404": {
						"description": "School not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/SchoolNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Schools"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/professors/search": {
			"get": {
				"operationId": "SearchProfessors",
				"responses": {
					"200": {
						"description": "Professors Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfessorSearchResult"
								}
							}
						}
					}
				},
				"tags": [
					"Professors"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "school_id",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"in": "query",
						"name": "cursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/professors/create": {
			"post": {
				"operationId": "CreateProfessor",
				"responses": {
					"201": {
						"description": "Professor Created Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Professor"
								},
								"examples": {
									"Example 1": {
										"value": {
											"id": 1,
											"first_name": "Example",
											"last_name": "Professor",
											"rmp_id": "hfaksjdfhuicyv",
											"school_id": 1
										}
									}
								}
							}
						}
					},
					"409": {
						"description": "Professor already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfessorAlreadyExistsError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Professors"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewProfessor"
							}
						}
					}
				}
			}
		},
		"/professors/{id}/analysis": {
			"get": {
				"operationId": "GetProfessorAnalysis",
				"responses": {
					"200": {
						"description": "Professor Analysis Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfessorAnalysis"
								}
							}
						}
					},
					"404": {
						"description": "Professor not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfessorNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Professors"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/professors/{id}/rating": {
			"get": {
				"operationId": "GetProfessorRating",
				"responses": {
					"200": {
						"description": "Rating Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Rating"
										}
									],
									"nullable": true
								}
							}
						}
					},
					"404": {
						"description": "Professor not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfessorNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Professors"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"in": "query",
						"name": "topKPercentage",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/professors/{id}": {
			"get": {
				"operationId": "GetProfessor",
				"responses": {
					"200": {
						"description": "Professor Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Professor"
								}
							}
						}
					},
					"404": {
						"description": "Professor not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfessorNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Professors"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateProfessor",
				"responses": {
					"200": {
						"description": "Professor Updated Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Professor"
								}
							}
						}
					},
					"404": {
						"description": "Professor not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfessorNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Professors"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatedProfessor"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteProfessor",
				"responses": {
					"200": {
						"description": "Professor Deleted Successfully"
					},
					"404": {
						"description": "Professor not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfessorNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Professors"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/professors/{id}/courses": {
			"get": {
				"operationId": "GetProfessorCourses",
				"responses": {
					"200": {
						"description": "Courses Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfessorCourses"
								}
							}
						}
					},
					"404": {
						"description": "Professor not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfessorNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Professors"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"in": "query",
						"name": "year",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"in": "query",
						"name": "semester",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Semester"
						}
					}
				]
			}
		},
		"/professors/{id}/reviews": {
			"get": {
				"operationId": "GetReviews",
				"responses": {
					"200": {
						"description": "Reviews Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReviewsSearchResult"
								}
							}
						}
					}
				},
				"tags": [
					"Professors"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"in": "query",
						"name": "cursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 25,
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/professors/{id}/enroll": {
			"post": {
				"operationId": "Enroll",
				"responses": {
					"201": {
						"description": "Review Created Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CourseEnrollmentResult"
								}
							}
						}
					}
				},
				"tags": [
					"Professors"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CourseEnrollment"
							}
						}
					}
				}
			}
		},
		"/reviews/create": {
			"post": {
				"operationId": "CreateReview",
				"responses": {
					"201": {
						"description": "Review Created Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReviewResponse"
								}
							}
						}
					}
				},
				"tags": [
					"Reviews"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewReview"
							}
						}
					}
				}
			}
		},
		"/reviews/{review_id}": {
			"get": {
				"operationId": "GetReview",
				"responses": {
					"200": {
						"description": "Review Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReviewResponse"
								}
							}
						}
					},
					"404": {
						"description": "Review not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReviewNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Reviews"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "review_id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateReview",
				"responses": {
					"200": {
						"description": "Review Updated Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReviewResponse"
								}
							}
						}
					},
					"404": {
						"description": "Review not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReviewNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Reviews"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "review_id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatedReview"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteReview",
				"responses": {
					"200": {
						"description": "Review Deleted Successfully"
					},
					"404": {
						"description": "Review not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ReviewNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Reviews"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "review_id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/courses/search": {
			"get": {
				"operationId": "SearchCourses",
				"responses": {
					"200": {
						"description": "Courses Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CourseSearchResult"
								}
							}
						}
					}
				},
				"tags": [
					"Courses"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "school_id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"in": "query",
						"name": "query",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "semester",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/Semester"
						}
					},
					{
						"in": "query",
						"name": "year",
						"required": false,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"in": "query",
						"name": "cursor",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "pageSize",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/courses/create": {
			"post": {
				"operationId": "CreateCourse",
				"responses": {
					"201": {
						"description": "Course Created Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Course"
								},
								"examples": {
									"Example 1": {
										"value": {
											"id": 1,
											"name": "Example Course",
											"code": "EX101",
											"school_id": 1
										}
									}
								}
							}
						}
					},
					"409": {
						"description": "Course already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CourseAlreadyExistsError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Courses"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/NewCourse"
							}
						}
					}
				}
			}
		},
		"/courses/{id}": {
			"get": {
				"operationId": "GetCourse",
				"responses": {
					"200": {
						"description": "Course Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Course"
								}
							}
						}
					},
					"404": {
						"description": "Course not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CourseNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Courses"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateCourse",
				"responses": {
					"200": {
						"description": "Course Updated Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Course"
								}
							}
						}
					},
					"404": {
						"description": "Course not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CourseNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Courses"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatedCourse"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteCourse",
				"responses": {
					"200": {
						"description": "Course Deleted Successfully"
					},
					"404": {
						"description": "Course not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CourseNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Courses"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					}
				]
			}
		},
		"/courses/{id}/professors": {
			"get": {
				"operationId": "GetCourseProfessors",
				"responses": {
					"200": {
						"description": "Professors Retrieved Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CourseProfessors"
								}
							}
						}
					},
					"404": {
						"description": "Course not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CourseNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Courses"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"in": "query",
						"name": "year",
						"required": true,
						"schema": {
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"in": "query",
						"name": "semester",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/Semester"
						}
					}
				]
			}
		},
		"/auth/register": {
			"post": {
				"operationId": "Register",
				"responses": {
					"201": {
						"description": "User Created Successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"email": "johndoe@gmail.com",
											"username": "joedoe",
											"password": "Password123!"
										}
									}
								}
							}
						}
					},
					"409": {
						"description": "User already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserAlreadyExistsError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegistrationParams"
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "Login Successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"username": "joedoe",
											"password": "Password123!"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Invalid password",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/InvalidPasswordError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"404": {
						"description": "User does not exist",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserNotFoundError"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginParams"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}